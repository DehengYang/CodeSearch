-------- Original Code ---------
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(start<0){
throw new IllegalArgumentException("Requires start >= 0.");
}
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

2.9997010601109535
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/TimeSeries.java<1050,1057>


-------- Patch ---------
if(end<start){
throw new IllegalArgumentException("Requires start >= 0.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(start<0){
throw new IllegalArgumentException("Requires start >= 0.");
}
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

2.9997010601109535
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/TimeSeries.java<1050,1057>


-------- Repeated Patch ---------
if(end<start){
throw new IllegalArgumentException("Requires start >= 0.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<start){
throw new IllegalArgumentException("Requires start >= 0.");
}
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
XYLineAndShapeRenderer clone=(XYLineAndShapeRenderer)super.clone();
clone.seriesLinesVisible=(BooleanList)this.seriesLinesVisible.clone();
if(this.legendLine!=null){
clone.legendLine=ShapeUtilities.clone(this.legendLine);
}
clone.seriesShapesVisible=(BooleanList)this.seriesShapesVisible.clone();
clone.seriesShapesFilled=(BooleanList)this.seriesShapesFilled.clone();
return clone;

2.200652234616598
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java<1153,1163>


-------- Patch ---------
clone.seriesLinesVisible=(BooleanList)this.seriesLinesVisible.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
clone.seriesShapesVisible=(BooleanList)this.seriesShapesVisible.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
clone.seriesShapesFilled=(BooleanList)this.seriesShapesFilled.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
DefaultIntervalCategoryDataset clone=(DefaultIntervalCategoryDataset)super.clone();
clone.categoryKeys=(Comparable[])this.categoryKeys.clone();
clone.seriesKeys=(Comparable[])this.seriesKeys.clone();
clone.startData=clone(this.startData);
clone.endData=clone(this.endData);
return clone;

2.1841609898779204
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/category/DefaultIntervalCategoryDataset.java<753,759>


-------- Patch ---------
clone.categoryKeys=(Comparable[])this.categoryKeys.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
clone.seriesKeys=(Comparable[])this.seriesKeys.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
clone.startData=clone(this.startData);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
clone.endData=clone(this.endData);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
SpiderWebPlot clone=(SpiderWebPlot)super.clone();
clone.legendItemShape=ShapeUtilities.clone(this.legendItemShape);
clone.seriesPaintList=(PaintList)this.seriesPaintList.clone();
clone.seriesOutlinePaintList=(PaintList)this.seriesOutlinePaintList.clone();
clone.seriesOutlineStrokeList=(StrokeList)this.seriesOutlineStrokeList.clone();
return clone;

2.18096996739327
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/plot/SpiderWebPlot.java<1610,1617>


-------- Patch ---------
clone.legendItemShape=ShapeUtilities.clone(this.legendItemShape);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
clone.seriesPaintList=(PaintList)this.seriesPaintList.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
clone.seriesOutlinePaintList=(PaintList)this.seriesOutlinePaintList.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
clone.seriesOutlineStrokeList=(StrokeList)this.seriesOutlineStrokeList.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(this.fixedRangeAxisSpace!=null){
clone.fixedRangeAxisSpace=(AxisSpace)ObjectUtilities.clone(this.fixedRangeAxisSpace);
}
if(this.fixedLegendItems!=null){
clone.fixedLegendItems=(LegendItemCollection)this.fixedLegendItems.clone();
}
clone.quadrantOrigin=(Point2D)ObjectUtilities.clone(this.quadrantOrigin);
clone.quadrantPaint=(Paint[])this.quadrantPaint.clone();
return clone;

2.089133999517954
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/plot/XYPlot.java<5711,5722>


-------- Patch ---------
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
if(this.end!=null){
clone.fixedLegendItems=(LegendItemCollection)this.fixedLegendItems.clone();
}
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
clone.quadrantOrigin=(Point2D)ObjectUtilities.clone(this.quadrantOrigin);
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(this.fixedRangeAxisSpace!=null){
clone.fixedRangeAxisSpace=(AxisSpace)ObjectUtilities.clone(this.fixedRangeAxisSpace);
}
if(this.fixedLegendItems!=null){
clone.fixedLegendItems=(LegendItemCollection)this.fixedLegendItems.clone();
}
clone.quadrantOrigin=(Point2D)ObjectUtilities.clone(this.quadrantOrigin);
clone.quadrantPaint=(Paint[])this.quadrantPaint.clone();
return clone;

2.089133999517954
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/plot/XYPlot.java<5711,5722>


-------- Repeated Patch ---------
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
if(this.end!=null){
clone.fixedLegendItems=(LegendItemCollection)this.fixedLegendItems.clone();
}
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
clone.quadrantOrigin=(Point2D)ObjectUtilities.clone(this.quadrantOrigin);
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
if(this.end!=null){
clone.fixedLegendItems=(LegendItemCollection)this.fixedLegendItems.clone();
}
clone.quadrantOrigin=(Point2D)ObjectUtilities.clone(this.quadrantOrigin);
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
LineAndShapeRenderer clone=(LineAndShapeRenderer)super.clone();
clone.seriesLinesVisible=(BooleanList)this.seriesLinesVisible.clone();
clone.seriesShapesVisible=(BooleanList)this.seriesShapesVisible.clone();
clone.seriesShapesFilled=(BooleanList)this.seriesShapesFilled.clone();
return clone;

2.0805646174283634
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/renderer/category/LineAndShapeRenderer.java<918,925>


-------- Repeated Patch ---------
clone.seriesLinesVisible=(BooleanList)this.seriesLinesVisible.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
clone.seriesShapesVisible=(BooleanList)this.seriesShapesVisible.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
clone.seriesShapesFilled=(BooleanList)this.seriesShapesFilled.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
clone.seriesLinesVisible=(BooleanList)this.seriesLinesVisible.clone();
clone.seriesShapesVisible=(BooleanList)this.seriesShapesVisible.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
clone.seriesLinesVisible=(BooleanList)this.seriesLinesVisible.clone();
clone.seriesShapesFilled=(BooleanList)this.seriesShapesFilled.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
clone.seriesShapesVisible=(BooleanList)this.seriesShapesVisible.clone();
clone.seriesShapesFilled=(BooleanList)this.seriesShapesFilled.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
clone.seriesLinesVisible=(BooleanList)this.seriesLinesVisible.clone();
clone.seriesShapesVisible=(BooleanList)this.seriesShapesVisible.clone();
clone.seriesShapesFilled=(BooleanList)this.seriesShapesFilled.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
DefaultKeyedValues clone=(DefaultKeyedValues)super.clone();
clone.keys=(ArrayList)this.keys.clone();
clone.values=(ArrayList)this.values.clone();
clone.indexMap=(HashMap)this.indexMap.clone();
return clone;

2.0805646174283634
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/DefaultKeyedValues.java<462,466>


-------- Patch ---------
clone.keys=(ArrayList)this.keys.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
clone.values=(ArrayList)this.values.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
clone.indexMap=(HashMap)this.indexMap.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(start>=end){
throw new IllegalArgumentException("Requires \'start\' < \'end\'.");
}

2.074059538228827
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/general/DatasetUtilities.java<540,542>


-------- Patch ---------
if(end<start){
throw new IllegalArgumentException("Requires \'start\' < \'end\'.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}

2.074059538228827
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/TimeSeries.java<1000,1002>

-------- No Patch ---------


-------- Similar Code ---------
KeyToGroupMap result=(KeyToGroupMap)super.clone();
result.defaultGroup=(Comparable)KeyToGroupMap.clone(this.defaultGroup);
result.groups=(List)KeyToGroupMap.clone(this.groups);
result.keyToGroupMap=(Map)KeyToGroupMap.clone(this.keyToGroupMap);
return result;

2.0671075711712734
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/KeyToGroupMap.java<259,264>


-------- Patch ---------
result.defaultGroup=(Comparable)KeyToGroupMap.clone(this.defaultGroup);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
result.groups=(List)KeyToGroupMap.clone(this.groups);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
result.keyToGroupMap=(Map)KeyToGroupMap.clone(this.keyToGroupMap);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(emptyRange){
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
return copy;
}else {
return createCopy(startIndex,endIndex);
}

2.0274355894971894
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/TimeSeries.java<1117,1124>

-------- No Patch ---------


-------- Similar Code ---------
{
XYSeries copy=(XYSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
XYDataItem item=(XYDataItem)this.data.get(index);
XYDataItem clone=(XYDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  System.err.println("Unable to add cloned data item.");
}

}
}
return copy;
}

2.0202788498645115
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/XYSeries.java<924,942>

-------- No Patch ---------


-------- Similar Code ---------
DefaultPieDataset clone=(DefaultPieDataset)super.clone();
clone.data=(KeyedObjects)this.data.clone();
return clone;

1.9990755590960338
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/pie/DefaultPieDataset.java<390,392>

-------- No Patch ---------


-------- Similar Code ---------
DefaultCategoryDataset clone=(DefaultCategoryDataset)super.clone();
clone.data=(KeyedObjects2D)this.data.clone();
return clone;

1.9990755590960338
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/category/DefaultCategoryDataset.java<459,461>

-------- No Patch ---------


-------- Similar Code ---------
DefaultMultiValueCategoryDataset clone=(DefaultMultiValueCategoryDataset)super.clone();
clone.data=(KeyedObjects2D)this.data.clone();
return clone;

1.9990755590960338
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/statistics/DefaultMultiValueCategoryDataset.java<401,404>

-------- No Patch ---------


-------- Similar Code ---------
DefaultBoxAndWhiskerCategoryDataset clone=(DefaultBoxAndWhiskerCategoryDataset)super.clone();
clone.data=(KeyedObjects2D)this.data.clone();
return clone;

1.9990755590960338
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java<916,919>

-------- No Patch ---------


-------- Similar Code ---------
DefaultStatisticalCategoryDataset clone=(DefaultStatisticalCategoryDataset)super.clone();
clone.data=(KeyedObjects2D)this.data.clone();
return clone;

1.9990755590960338
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java<728,731>

-------- No Patch ---------


-------- Similar Code ---------
AbstractPieItemLabelGenerator clone=(AbstractPieItemLabelGenerator)super.clone();
if(this.numberFormat!=null){
clone.numberFormat=(NumberFormat)this.numberFormat.clone();
}
if(this.percentFormat!=null){
clone.percentFormat=(NumberFormat)this.percentFormat.clone();
}
return clone;

1.970043783024736
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/labels/AbstractPieItemLabelGenerator.java<236,244>


-------- Patch ---------
if(this.start!=null){
clone.percentFormat=(NumberFormat)this.percentFormat.clone();
}
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
AbstractCategoryItemLabelGenerator clone=(AbstractCategoryItemLabelGenerator)super.clone();
if(this.numberFormat!=null){
clone.numberFormat=(NumberFormat)this.numberFormat.clone();
}
if(this.dateFormat!=null){
clone.dateFormat=(DateFormat)this.dateFormat.clone();
}
return clone;

1.970043783024736
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/labels/AbstractCategoryItemLabelGenerator.java<323,331>


-------- Patch ---------
if(this.end!=null){
clone.dateFormat=(DateFormat)this.dateFormat.clone();
}
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
HighLowItemLabelGenerator clone=(HighLowItemLabelGenerator)super.clone();
if(this.dateFormatter!=null){
clone.dateFormatter=(DateFormat)this.dateFormatter.clone();
}
if(this.numberFormatter!=null){
clone.numberFormatter=(NumberFormat)this.numberFormatter.clone();
}
return clone;

1.970043783024736
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/labels/HighLowItemLabelGenerator.java<185,195>


-------- Patch ---------
if(this.end!=null){
clone.numberFormatter=(NumberFormat)this.numberFormatter.clone();
}
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
AbstractRenderer clone=(AbstractRenderer)super.clone();
if(this.seriesVisibleList!=null){
clone.seriesVisibleList=(BooleanList)this.seriesVisibleList.clone();
}
if(this.seriesVisibleInLegendList!=null){
clone.seriesVisibleInLegendList=(BooleanList)this.seriesVisibleInLegendList.clone();
}

1.9642873141287542
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/renderer/AbstractRenderer.java<3162,3172>


-------- Patch ---------
if(this.end!=null){
clone.seriesVisibleInLegendList=(BooleanList)this.seriesVisibleInLegendList.clone();
}
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
AbstractXYItemLabelGenerator clone=(AbstractXYItemLabelGenerator)super.clone();
if(this.xFormat!=null){
clone.xFormat=(NumberFormat)this.xFormat.clone();
}
if(this.yFormat!=null){
clone.yFormat=(NumberFormat)this.yFormat.clone();
}

1.9642873141287542
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/labels/AbstractXYItemLabelGenerator.java<362,369>


-------- Patch ---------
if(this.start!=null){
clone.yFormat=(NumberFormat)this.yFormat.clone();
}
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
CompassPlot clone=(CompassPlot)super.clone();
if(this.circle1!=null){
clone.circle1=(Ellipse2D)this.circle1.clone();
}
if(this.circle2!=null){
clone.circle2=(Ellipse2D)this.circle2.clone();
}

1.9642873141287542
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/plot/CompassPlot.java<805,811>


-------- Patch ---------
if(this.start!=null){
clone.circle2=(Ellipse2D)this.circle2.clone();
}
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
XYBarRenderer result=(XYBarRenderer)super.clone();
if(this.gradientPaintTransformer!=null){
result.gradientPaintTransformer=(GradientPaintTransformer)ObjectUtilities.clone(this.gradientPaintTransformer);
}
result.legendBar=ShapeUtilities.clone(this.legendBar);
return result;

1.9541709567944525
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/renderer/xy/XYBarRenderer.java<1265,1271>

-------- No Patch ---------


-------- Similar Code ---------
ChartRenderingInfo clone=(ChartRenderingInfo)super.clone();
if(this.chartArea!=null){
clone.chartArea=(Rectangle2D)this.chartArea.clone();
}
if(this.entities instanceof PublicCloneable){
PublicCloneable pc=(PublicCloneable)this.entities;
clone.entities=(EntityCollection)pc.clone();
}
return clone;

1.954113819098255
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/ChartRenderingInfo.java<259,267>


-------- Patch ---------
if(this.end instanceof PublicCloneable){
PublicCloneable copy=(PublicCloneable)this.entities;
clone.entities=(EntityCollection)pc.clone();
}
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(seriesParameterName==null){
throw new IllegalArgumentException("Null \'seriesParameterName\' argument.");
}
if(itemParameterName==null){
throw new IllegalArgumentException("Null \'itemParameterName\' argument.");
}
this.dateFormat=(DateFormat)dateFormat.clone();
this.prefix=prefix;
this.seriesParameterName=seriesParameterName;

1.9465924656563118
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/urls/TimeSeriesURLGenerator.java<109,120>


-------- Patch ---------
if(seriesParameterName<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<start){
throw new IllegalArgumentException("Null \'seriesParameterName\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
if(start==null){
throw new IllegalArgumentException("Null \'itemParameterName\' argument.");
}
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
this.copy=(DateFormat)dateFormat.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
this.end=seriesParameterName;
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
AbstractXYItemRenderer clone=(AbstractXYItemRenderer)super.clone();
clone.itemLabelGeneratorList=(ObjectList)this.itemLabelGeneratorList.clone();
if(this.baseItemLabelGenerator!=null&&this.baseItemLabelGenerator instanceof PublicCloneable){
PublicCloneable pc=(PublicCloneable)this.baseItemLabelGenerator;
clone.baseItemLabelGenerator=(XYItemLabelGenerator)pc.clone();
}

1.943965626406524
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java<1701,1710>


-------- Patch ---------
clone.itemLabelGeneratorList=(ObjectList)this.itemLabelGeneratorList.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
RelativeDateFormat clone=(RelativeDateFormat)super.clone();
clone.dayFormatter=(NumberFormat)this.dayFormatter.clone();
clone.secondFormatter=(NumberFormat)this.secondFormatter.clone();
return clone;

1.9428090415820631
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/util/RelativeDateFormat.java<589,592>


-------- Patch ---------
clone.secondFormatter=(NumberFormat)this.secondFormatter.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
DefaultBoxAndWhiskerXYDataset clone=(DefaultBoxAndWhiskerXYDataset)super.clone();
clone.dates=new java.util.ArrayList(this.dates);
clone.items=new java.util.ArrayList(this.items);
return clone;

1.9428090415820631
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/statistics/DefaultBoxAndWhiskerXYDataset.java<551,555>


-------- Patch ---------
clone.dates=new java.util.ArrayList(this.dates);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
clone.items=new java.util.ArrayList(this.items);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
TimeTableXYDataset clone=(TimeTableXYDataset)super.clone();
clone.values=(DefaultKeyedValues2D)this.values.clone();
clone.workingCalendar=(Calendar)this.workingCalendar.clone();
return clone;

1.9428090415820631
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/TimeTableXYDataset.java<598,601>


-------- Patch ---------
clone.values=(DefaultKeyedValues2D)this.values.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
clone.workingCalendar=(Calendar)this.workingCalendar.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
AbstractBlock clone=(AbstractBlock)super.clone();
clone.bounds=(Rectangle2D)ShapeUtilities.clone(this.bounds);
if(this.frame instanceof PublicCloneable){
PublicCloneable pc=(PublicCloneable)this.frame;
clone.frame=(BlockFrame)pc.clone();
}
return clone;

1.9367839145523915
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/block/AbstractBlock.java<596,602>


-------- Patch ---------
if(this.start instanceof PublicCloneable){
PublicCloneable (PublicCloneable)this.start=(PublicCloneable)this.frame;
clone.frame=(BlockFrame)pc.clone();
}
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
StandardXYItemRenderer clone=(StandardXYItemRenderer)super.clone();
clone.seriesShapesFilled=(BooleanList)this.seriesShapesFilled.clone();
clone.legendLine=ShapeUtilities.clone(this.legendLine);
return clone;

1.936441710371274
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/renderer/xy/StandardXYItemRenderer.java<987,991>


-------- Repeated Patch ---------
clone.seriesShapesFilled=(BooleanList)this.seriesShapesFilled.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
clone.legendLine=ShapeUtilities.clone(this.legendLine);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(start.compareTo(end)>0){
throw new IllegalArgumentException("Requires start on or before end.");
}

1.9349098087911258
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/TimeSeries.java<1097,1100>


-------- Patch ---------
if(start.compareTo(end)<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<start){
throw new IllegalArgumentException("Requires start on or before end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
LegendItem clone=(LegendItem)super.clone();
if(this.seriesKey instanceof PublicCloneable){
PublicCloneable pc=(PublicCloneable)this.seriesKey;
clone.seriesKey=(Comparable)pc.clone();
}
clone.shape=ShapeUtilities.clone(this.shape);

1.9336995618478525
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/LegendItem.java<1124,1130>


-------- Patch ---------
if(this.start instanceof PublicCloneable){
PublicCloneable copy=(PublicCloneable)this.seriesKey;
clone.seriesKey=(Comparable)pc.clone();
}
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
clone.shape=ShapeUtilities.clone(this.shape);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
LegendGraphic clone=(LegendGraphic)super.clone();
clone.shape=ShapeUtilities.clone(this.shape);
clone.line=ShapeUtilities.clone(this.line);
return clone;

1.9298372927094183
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/title/LegendGraphic.java<719,722>


-------- Repeated Patch ---------
clone.shape=ShapeUtilities.clone(this.shape);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
clone.line=ShapeUtilities.clone(this.line);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(polygon==null){
throw new IllegalArgumentException("Null \'polygon\' argument.");
}
if(polygon.length%2!=0){
throw new IllegalArgumentException("The \'polygon\' array must "+"contain an even number of items.");
}
this.polygon=(double[])polygon.clone();
this.stroke=stroke;
this.outlinePaint=outlinePaint;

1.8991420600873
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/annotations/XYPolygonAnnotation.java<138,147>


-------- Patch ---------
if(polygon<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<start){
throw new IllegalArgumentException("Null \'polygon\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
if(polygon.length%2!=0){
throw new IllegalArgumentException("The \'polygon\' array must "+"contain an even number of items.");
}
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
this.end=(double[])polygon.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
this.copy=outlinePaint;
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
{
PlotRenderingInfo clone=(PlotRenderingInfo)super.clone();
if(this.plotArea!=null){
clone.plotArea=(Rectangle2D)this.plotArea.clone();
}
if(this.dataArea!=null){
clone.dataArea=(Rectangle2D)this.dataArea.clone();
}
clone.subplotInfo=new java.util.ArrayList(this.subplotInfo.size());
for(int i=0;i<this.subplotInfo.size();i++){
PlotRenderingInfo info=(PlotRenderingInfo)this.subplotInfo.get(i);
clone.subplotInfo.add(info.clone());
}
return clone;
}

1.880820624552371
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/plot/PlotRenderingInfo.java<245,260>

-------- No Patch ---------


-------- Similar Code ---------
FastScatterPlot clone=(FastScatterPlot)super.clone();
if(this.data!=null){
clone.data=ArrayUtilities.clone(this.data);
}
if(this.domainAxis!=null){
clone.domainAxis=(ValueAxis)this.domainAxis.clone();
clone.domainAxis.setPlot(clone);
clone.domainAxis.addChangeListener(clone);
}

1.8403658558970037
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/plot/FastScatterPlot.java<1070,1078>

-------- No Patch ---------


-------- Similar Code ---------
if(start>end){
throw new IllegalArgumentException("Requires start <= end.");
}
this.start=start;
this.end=end;

1.8309493362512628
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/SimpleTimePeriod.java<77,81>


-------- Patch ---------
this.start=start;
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
this.end=end;
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
JFreeChart chart=(JFreeChart)super.clone();
chart.renderingHints=(RenderingHints)this.renderingHints.clone();
if(this.title!=null){
chart.title=(TextTitle)this.title.clone();
chart.title.addChangeListener(chart);
}

1.8179117799733797
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/JFreeChart.java<1713,1723>


-------- Patch ---------
chart.renderingHints=(RenderingHints)this.renderingHints.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
MeterPlot clone=(MeterPlot)super.clone();
clone.tickLabelFormat=(NumberFormat)this.tickLabelFormat.clone();
clone.intervals=new java.util.ArrayList(this.intervals);
if(clone.dataset!=null){
clone.dataset.addChangeListener(clone);
}
return clone;

1.81382382529471
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/plot/MeterPlot.java<1329,1336>


-------- Patch ---------
if(clone<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(dataset<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
clone.tickLabelFormat=(NumberFormat)this.tickLabelFormat.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
Plot clone=(Plot)super.clone();
if(this.datasetGroup!=null){
clone.datasetGroup=(DatasetGroup)ObjectUtilities.clone(this.datasetGroup);
}
clone.drawingSupplier=(DrawingSupplier)ObjectUtilities.clone(this.drawingSupplier);
clone.listenerList=new EventListenerList();
return clone;

1.8130470959413434
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/plot/Plot.java<1378,1388>


-------- Patch ---------
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
clone.drawingSupplier=(DrawingSupplier)ObjectUtilities.clone(this.drawingSupplier);
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
TaskSeriesCollection clone=(TaskSeriesCollection)super.clone();
clone.data=(List)ObjectUtilities.deepClone(this.data);
clone.keys=new java.util.ArrayList(this.keys);
return clone;

1.8031083770379408
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/gantt/TaskSeriesCollection.java<681,684>


-------- Patch ---------
clone.keys=new java.util.ArrayList(this.keys);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
XYSeriesCollection clone=(XYSeriesCollection)super.clone();
clone.data=(List)ObjectUtilities.deepClone(this.data);
clone.intervalDelegate=(IntervalXYDelegate)this.intervalDelegate.clone();
return clone;

1.8031083770379408
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/XYSeriesCollection.java<502,506>


-------- Patch ---------
clone.intervalDelegate=(IntervalXYDelegate)this.intervalDelegate.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
TimeSeriesCollection clone=(TimeSeriesCollection)super.clone();
clone.data=(List)ObjectUtilities.deepClone(this.data);
clone.workingCalendar=(Calendar)this.workingCalendar.clone();
return clone;

1.8031083770379408
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/TimeSeriesCollection.java<784,787>


-------- Repeated Patch ---------
clone.workingCalendar=(Calendar)this.workingCalendar.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
{
TimePeriodValues copy=(TimePeriodValues)super.clone();
copy.data=new ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimePeriodValue item=(TimePeriodValue)this.data.get(index);
TimePeriodValue clone=(TimePeriodValue)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  System.err.println("Failed to add cloned item.");
}

}
}
return copy;
}

1.7980566276422896
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/TimePeriodValues.java<496,515>

-------- No Patch ---------


-------- Similar Code ---------
MultiplePiePlot clone=(MultiplePiePlot)super.clone();
clone.pieChart=(JFreeChart)this.pieChart.clone();
clone.sectionPaints=new HashMap(this.sectionPaints);
clone.legendItemShape=ShapeUtilities.clone(this.legendItemShape);
return clone;

1.790519283642099
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/plot/MultiplePiePlot.java<658,662>


-------- Patch ---------
clone.pieChart=(JFreeChart)this.pieChart.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
clone.sectionPaints=new HashMap(this.sectionPaints);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
clone.legendItemShape=ShapeUtilities.clone(this.legendItemShape);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
DefaultKeyedValues2D clone=(DefaultKeyedValues2D)super.clone();
clone.columnKeys=new java.util.ArrayList(this.columnKeys);
clone.rowKeys=new java.util.ArrayList(this.rowKeys);
clone.rows=(List)ObjectUtilities.deepClone(this.rows);
return clone;

1.790519283642099
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/DefaultKeyedValues2D.java<571,579>


-------- Patch ---------
clone.columnKeys=new java.util.ArrayList(this.columnKeys);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
clone.rowKeys=new java.util.ArrayList(this.rowKeys);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
clone.rows=(List)ObjectUtilities.deepClone(this.rows);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
{
KeyedObjects2D clone=(KeyedObjects2D)super.clone();
clone.columnKeys=new java.util.ArrayList(this.columnKeys);
clone.rowKeys=new java.util.ArrayList(this.rowKeys);
clone.rows=new java.util.ArrayList(this.rows.size());
Iterator iterator=this.rows.iterator();
while(iterator.hasNext()){
KeyedObjects row=(KeyedObjects)iterator.next();
clone.rows.add(row.clone());
}
return clone;
}

1.7841272786583726
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/KeyedObjects2D.java<509,520>

-------- No Patch ---------


-------- Similar Code ---------
DateAxis clone=(DateAxis)super.clone();
if(this.dateFormatOverride!=null){
clone.dateFormatOverride=(DateFormat)this.dateFormatOverride.clone();
}
return clone;

1.7786903278538917
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/axis/DateAxis.java<1941,1948>

-------- No Patch ---------


-------- Similar Code ---------
NumberAxis clone=(NumberAxis)super.clone();
if(this.numberFormatOverride!=null){
clone.numberFormatOverride=(NumberFormat)this.numberFormatOverride.clone();
}
return clone;

1.7786903278538917
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/axis/NumberAxis.java<1365,1370>

-------- No Patch ---------


-------- Similar Code ---------
CustomXYToolTipGenerator clone=(CustomXYToolTipGenerator)super.clone();
if(this.toolTipSeries!=null){
clone.toolTipSeries=new java.util.ArrayList(this.toolTipSeries);
}
return clone;

1.7786903278538917
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/labels/CustomXYToolTipGenerator.java<159,164>

-------- No Patch ---------


-------- Similar Code ---------
SamplingXYLineRenderer clone=(SamplingXYLineRenderer)super.clone();
if(this.legendLine!=null){
clone.legendLine=ShapeUtilities.clone(this.legendLine);
}
return clone;

1.767189407121714
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/renderer/xy/SamplingXYLineRenderer.java<308,312>

-------- No Patch ---------


-------- Similar Code ---------
TickUnits clone=(TickUnits)super.clone();
clone.tickUnits=new java.util.ArrayList(this.tickUnits);
return clone;

1.7490755590960338
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/axis/TickUnits.java<187,189>


-------- Patch ---------
clone.tickUnits=new java.util.ArrayList(this.tickUnits);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
CustomXYURLGenerator clone=(CustomXYURLGenerator)super.clone();
clone.urlSeries=new java.util.ArrayList(this.urlSeries);
return clone;

1.7490755590960338
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/urls/CustomXYURLGenerator.java<203,205>

-------- No Patch ---------


-------- Similar Code ---------
CustomCategoryURLGenerator clone=(CustomCategoryURLGenerator)super.clone();
clone.urlSeries=new java.util.ArrayList(this.urlSeries);
return clone;

1.7490755590960338
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/urls/CustomCategoryURLGenerator.java<191,194>

-------- No Patch ---------


-------- Similar Code ---------
LookupPaintScale clone=(LookupPaintScale)super.clone();
clone.lookupTable=new java.util.ArrayList(this.lookupTable);
return clone;

1.7490755590960338
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/renderer/LookupPaintScale.java<352,354>


-------- Patch ---------
clone.lookupTable=new java.util.ArrayList(this.lookupTable);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
ScatterRenderer clone=(ScatterRenderer)super.clone();
clone.seriesShapesFilled=(BooleanList)this.seriesShapesFilled.clone();
return clone;

1.7490755590960338
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/renderer/category/ScatterRenderer.java<562,565>


-------- Repeated Patch ---------
clone.seriesShapesFilled=(BooleanList)this.seriesShapesFilled.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
DefaultPolarItemRenderer clone=(DefaultPolarItemRenderer)super.clone();
clone.seriesFilled=(BooleanList)this.seriesFilled.clone();
return clone;

1.7490755590960338
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/renderer/DefaultPolarItemRenderer.java<335,338>


-------- Patch ---------
clone.seriesFilled=(BooleanList)this.seriesFilled.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
LogFormat clone=(LogFormat)super.clone();
clone.formatter=(NumberFormat)this.formatter.clone();
return clone;

1.7490755590960338
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/util/LogFormat.java<258,260>

-------- No Patch ---------


-------- Similar Code ---------
XYTaskDataset clone=(XYTaskDataset)super.clone();
clone.underlying=(TaskSeriesCollection)this.underlying.clone();
return clone;

1.7490755590960338
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/gantt/XYTaskDataset.java<460,462>


-------- Patch ---------
clone.underlying=(TaskSeriesCollection)this.underlying.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
{
ThermometerPlot clone=(ThermometerPlot)super.clone();
if(clone.dataset!=null){
clone.dataset.addChangeListener(clone);
}
clone.rangeAxis=(ValueAxis)ObjectUtilities.clone(this.rangeAxis);
if(clone.rangeAxis!=null){
clone.rangeAxis.setPlot(clone);
clone.rangeAxis.addChangeListener(clone);
}
clone.valueFormat=(NumberFormat)this.valueFormat.clone();
clone.subrangePaint=(Paint[])this.subrangePaint.clone();
return clone;
}

1.7468641529479987
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/plot/ThermometerPlot.java<1562,1579>


-------- Repeated Patch ---------
if(clone<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(dataset<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(dataset<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
XYShapeRenderer clone=(XYShapeRenderer)super.clone();
if(this.paintScale instanceof PublicCloneable){
PublicCloneable pc=(PublicCloneable)this.paintScale;
clone.paintScale=(PaintScale)pc.clone();
}
return clone;

1.7435641951204965
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/renderer/xy/XYShapeRenderer.java<570,575>


-------- Patch ---------
if(this.start instanceof PublicCloneable){
PublicCloneable copy=(PublicCloneable)this.paintScale;
clone.paintScale=(PaintScale)pc.clone();
}
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
XYBlockRenderer clone=(XYBlockRenderer)super.clone();
if(this.paintScale instanceof PublicCloneable){
PublicCloneable pc=(PublicCloneable)this.paintScale;
clone.paintScale=(PaintScale)pc.clone();
}
return clone;

1.7435641951204965
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/renderer/xy/XYBlockRenderer.java<439,444>


-------- Repeated Patch ---------
if(this.start instanceof PublicCloneable){
PublicCloneable copy=(PublicCloneable)this.paintScale;
clone.paintScale=(PaintScale)pc.clone();
}
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
SlidingGanttCategoryDataset clone=(SlidingGanttCategoryDataset)super.clone();
if(this.underlying instanceof PublicCloneable){
PublicCloneable pc=(PublicCloneable)this.underlying;
clone.underlying=(GanttCategoryDataset)pc.clone();
}
return clone;

1.7435641951204965
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/gantt/SlidingGanttCategoryDataset.java<604,610>


-------- Patch ---------
if(this.start instanceof PublicCloneable){
PublicCloneable copy=(PublicCloneable)this.underlying;
clone.underlying=(GanttCategoryDataset)pc.clone();
}
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
SlidingCategoryDataset clone=(SlidingCategoryDataset)super.clone();
if(this.underlying instanceof PublicCloneable){
PublicCloneable pc=(PublicCloneable)this.underlying;
clone.underlying=(CategoryDataset)pc.clone();
}
return clone;

1.7435641951204965
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/category/SlidingCategoryDataset.java<345,350>


-------- Patch ---------
if(this.start instanceof PublicCloneable){
PublicCloneable copy=(PublicCloneable)this.underlying;
clone.underlying=(CategoryDataset)pc.clone();
}
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
KeyedObject clone=(KeyedObject)super.clone();
if(this.object instanceof PublicCloneable){
PublicCloneable pc=(PublicCloneable)this.object;
clone.object=pc.clone();
}
return clone;

1.7435641951204965
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/KeyedObject.java<114,119>


-------- Patch ---------
if(this.start instanceof PublicCloneable){
PublicCloneable copy=(PublicCloneable)this.object;
clone.object=pc.clone();
}
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
XYBarDataset clone=(XYBarDataset)super.clone();
if(this.underlying instanceof PublicCloneable){
PublicCloneable pc=(PublicCloneable)this.underlying;
clone.underlying=(XYDataset)pc.clone();
}
return clone;

1.7435641951204965
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/XYBarDataset.java<376,381>


-------- Patch ---------
if(this.start instanceof PublicCloneable){
PublicCloneable copy=(PublicCloneable)this.underlying;
clone.underlying=(XYDataset)pc.clone();
}
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(coefficients==null){
throw new IllegalArgumentException("Null \'coefficients\' argument");
}
this.coefficients=(double[])coefficients.clone();

1.7434563530497265
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/function/PolynomialFunction2D.java<67,70>


-------- Patch ---------
if(coefficients<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<start){
throw new IllegalArgumentException("Null \'coefficients\' argument");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
this.start=(double[])coefficients.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
XYDifferenceRenderer clone=(XYDifferenceRenderer)super.clone();
clone.legendLine=ShapeUtilities.clone(this.legendLine);
return clone;

1.7389158011040613
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/renderer/xy/XYDifferenceRenderer.java<1191,1193>


-------- Repeated Patch ---------
clone.legendLine=ShapeUtilities.clone(this.legendLine);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
XYAreaRenderer clone=(XYAreaRenderer)super.clone();
clone.legendArea=ShapeUtilities.clone(this.legendArea);
return clone;

1.7389158011040613
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/renderer/xy/XYAreaRenderer.java<695,697>


-------- Patch ---------
clone.legendArea=ShapeUtilities.clone(this.legendArea);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
XYAreaRenderer2 clone=(XYAreaRenderer2)super.clone();
clone.legendArea=ShapeUtilities.clone(this.legendArea);
return clone;

1.7389158011040613
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/renderer/xy/XYAreaRenderer2.java<413,415>


-------- Repeated Patch ---------
clone.legendArea=ShapeUtilities.clone(this.legendArea);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
DefaultHeatMapDataset clone=(DefaultHeatMapDataset)super.clone();
clone.zValues=DataUtilities.clone(this.zValues);
return clone;

1.7389158011040613
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/general/DefaultHeatMapDataset.java<319,321>


-------- Patch ---------
clone.zValues=DataUtilities.clone(this.zValues);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(this.fillPaintTransformer instanceof PublicCloneable){
PublicCloneable pc=(PublicCloneable)this.fillPaintTransformer;
clone.fillPaintTransformer=(GradientPaintTransformer)pc.clone();
}
clone.line=ShapeUtilities.clone(this.line);
return clone;

1.7198662110077998
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/LegendItem.java<1131,1137>


-------- Repeated Patch ---------
clone.line=ShapeUtilities.clone(this.line);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(domainAxis==null){
throw new IllegalArgumentException("Null \'domainAxis\' argument.");
}
if(rangeAxis==null){
throw new IllegalArgumentException("Null \'rangeAxis\' argument.");
}
this.data=data;
this.xDataRange=calculateXDataRange(data);
this.yDataRange=calculateYDataRange(data);

1.7003456867446143
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/plot/FastScatterPlot.java<197,206>


-------- Patch ---------
if(domainAxis<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<start){
throw new IllegalArgumentException("Null \'domainAxis\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
if(end==null){
throw new IllegalArgumentException("Null \'rangeAxis\' argument.");
}
copy.data=new java.util.ArrayList();


-------- Patch ---------
this.copy=calculateXDataRange(data);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
this.data=calculateYDataRange(data);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
PeriodAxis clone=(PeriodAxis)super.clone();
clone.timeZone=(TimeZone)this.timeZone.clone();
clone.labelInfo=new PeriodAxisLabelInfo[this.labelInfo.length];
for(int i=0;i<this.labelInfo.length;i++){
clone.labelInfo[i]=this.labelInfo[i];
}
return clone;

1.6942202879275685
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/axis/PeriodAxis.java<1161,1168>


-------- Patch ---------
clone.timeZone=(TimeZone)this.timeZone.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
clone.labelInfo=new PeriodAxisLabelInfo[this.labelInfo.start];
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
KeyedObjects clone=(KeyedObjects)super.clone();
clone.data=new java.util.ArrayList();
Iterator iterator=this.data.iterator();
while(iterator.hasNext()){
KeyedObject ko=(KeyedObject)iterator.next();
clone.data.add(ko.clone());
}
return clone;

1.6921883404158737
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/KeyedObjects.java<325,332>

-------- No Patch ---------


-------- Similar Code ---------
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

1.689930935710814
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/TimeSeries.java<1058,1070>

-------- No Patch ---------


-------- Similar Code ---------
XYIntervalSeriesCollection clone=(XYIntervalSeriesCollection)super.clone();
int seriesCount=getSeriesCount();
clone.data=new java.util.ArrayList(seriesCount);
for(int i=0;i<this.data.size();i++){
clone.data.set(i,getSeries(i).clone());
}
return clone;

1.6851839473714743
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/XYIntervalSeriesCollection.java<378,385>

-------- No Patch ---------


-------- Similar Code ---------
if(clone.legendItemToolTipGenerator instanceof PublicCloneable){
clone.legendItemToolTipGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemToolTipGenerator);
}
if(clone.legendItemURLGenerator instanceof PublicCloneable){
clone.legendItemURLGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemURLGenerator);
}
clone.foregroundAnnotations=(List)ObjectUtilities.deepClone(this.foregroundAnnotations);
clone.backgroundAnnotations=(List)ObjectUtilities.deepClone(this.backgroundAnnotations);
if(clone.legendItemLabelGenerator instanceof PublicCloneable){
clone.legendItemLabelGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemLabelGenerator);
}

1.6658109397792509
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java<1724,1741>


-------- Patch ---------
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
if(clone.legendItemToolTipGenerator instanceof PublicCloneable){
clone.legendItemToolTipGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemToolTipGenerator);
}
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
if(clone.legendItemURLGenerator instanceof PublicCloneable){
clone.legendItemURLGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemURLGenerator);
}
copy.data=new java.util.ArrayList();


-------- Patch ---------
clone.backgroundAnnotations=(List)ObjectUtilities.deepClone(this.backgroundAnnotations);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(clone.legendItemLabelGenerator instanceof PublicCloneable){
clone.legendItemLabelGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemLabelGenerator);
}
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(clone.legendItemURLGenerator instanceof PublicCloneable){
clone.legendItemURLGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemURLGenerator);
}
clone.foregroundAnnotations=(List)ObjectUtilities.deepClone(this.foregroundAnnotations);
clone.backgroundAnnotations=(List)ObjectUtilities.deepClone(this.backgroundAnnotations);
if(clone.legendItemLabelGenerator instanceof PublicCloneable){
clone.legendItemLabelGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemLabelGenerator);
}
if(clone.legendItemToolTipGenerator instanceof PublicCloneable){
clone.legendItemToolTipGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemToolTipGenerator);
}

1.6658109397792509
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java<1728,1745>


-------- Repeated Patch ---------
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
if(clone.legendItemURLGenerator instanceof PublicCloneable){
clone.legendItemURLGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemURLGenerator);
}
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
clone.backgroundAnnotations=(List)ObjectUtilities.deepClone(this.backgroundAnnotations);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(clone.legendItemLabelGenerator instanceof PublicCloneable){
clone.legendItemLabelGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemLabelGenerator);
}
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(clone.legendItemToolTipGenerator instanceof PublicCloneable){
clone.legendItemToolTipGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemToolTipGenerator);
}
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
clone.backgroundAnnotations=(List)ObjectUtilities.deepClone(this.backgroundAnnotations);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
if(clone.legendItemURLGenerator instanceof PublicCloneable){
clone.legendItemURLGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemURLGenerator);
}
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(clone.legendItemLabelGenerator instanceof PublicCloneable){
clone.legendItemLabelGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemLabelGenerator);
}
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
if(clone.legendItemURLGenerator instanceof PublicCloneable){
clone.legendItemURLGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemURLGenerator);
}
copy.data=new java.util.ArrayList();


-------- Patch ---------
clone.backgroundAnnotations=(List)ObjectUtilities.deepClone(this.backgroundAnnotations);
if(clone.legendItemLabelGenerator instanceof PublicCloneable){
clone.legendItemLabelGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemLabelGenerator);
}
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
clone.backgroundAnnotations=(List)ObjectUtilities.deepClone(this.backgroundAnnotations);
if(clone.legendItemLabelGenerator instanceof PublicCloneable){
clone.legendItemLabelGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemLabelGenerator);
}
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
if(clone.legendItemURLGenerator instanceof PublicCloneable){
clone.legendItemURLGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemURLGenerator);
}
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(this.legendTextFont!=null){
clone.legendTextFont=(ObjectList)this.legendTextFont.clone();
}
if(this.legendTextPaint!=null){
clone.legendTextPaint=(PaintList)this.legendTextPaint.clone();
}
clone.listenerList=new EventListenerList();
return clone;

1.6277866835790094
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/renderer/AbstractRenderer.java<3252,3260>


-------- Patch ---------
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
if(this.start!=null){
clone.legendTextPaint=(PaintList)this.legendTextPaint.clone();
}
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(seriesKeys.size()!=data.length){
throw new IllegalArgumentException("The number of series keys does "+"not match the number of series in the data array.");
}
this.seriesKeys=seriesKeys;
int seriesCount=data.length;
this.allSeriesData=new java.util.ArrayList(seriesCount);

1.6274355894971895
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/DefaultWindDataset.java<132,138>


-------- Patch ---------
if(seriesKeys<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<data){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<length){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<start){
throw new IllegalArgumentException("The number of series keys does "+"not match the number of series in the data array.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
StandardEntityCollection clone=(StandardEntityCollection)super.clone();
clone.entities=new java.util.ArrayList(this.entities.size());
for(int i=0;i<this.entities.size();i++){
ChartEntity entity=(ChartEntity)this.entities.get(i);
clone.entities.add(entity.clone());
}
return clone;

1.6236154196053576
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/entity/StandardEntityCollection.java<196,203>


-------- Patch ---------
clone.entities=new java.util.ArrayList(this.entities.size());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
PiePlot clone=(PiePlot)super.clone();
if(clone.dataset!=null){
clone.dataset.addChangeListener(clone);
}
if(this.urlGenerator instanceof PublicCloneable){
clone.urlGenerator=(PieURLGenerator)ObjectUtilities.clone(this.urlGenerator);
}

1.6139976000980085
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/plot/PiePlot.java<3636,3643>


-------- Repeated Patch ---------
if(clone<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(dataset<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(this.end instanceof PublicCloneable){
clone.urlGenerator=(PieURLGenerator)ObjectUtilities.clone(this.urlGenerator);
}
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(dataset<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(data==null){
throw new IllegalArgumentException("Null \'data\' argument.");
}

1.5938886664887109
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/DataUtilities.java<124,126>


-------- Patch ---------
if(data<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<start){
throw new IllegalArgumentException("Null \'data\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(data==null){
throw new IllegalArgumentException("Null \'data\' argument.");
}

1.5938886664887109
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/DataUtilities.java<152,154>


-------- Repeated Patch ---------
if(data<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<start){
throw new IllegalArgumentException("Null \'data\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(data<start){
throw new IllegalArgumentException("Null \'data\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(data==null){
throw new IllegalArgumentException("Null \'data\' argument.");
}

1.5938886664887109
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/DataUtilities.java<179,181>


-------- Repeated Patch ---------
if(data<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<start){
throw new IllegalArgumentException("Null \'data\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(data<start){
throw new IllegalArgumentException("Null \'data\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(data==null){
throw new IllegalArgumentException("Null \'data\' argument.");
}

1.5938886664887109
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/DataUtilities.java<207,209>


-------- Repeated Patch ---------
if(data<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<start){
throw new IllegalArgumentException("Null \'data\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(data<start){
throw new IllegalArgumentException("Null \'data\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(data==null){
throw new IllegalArgumentException("Null \'data\' argument.");
}

1.5938886664887109
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/DataUtilities.java<274,276>


-------- Repeated Patch ---------
if(data<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<start){
throw new IllegalArgumentException("Null \'data\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(data<start){
throw new IllegalArgumentException("Null \'data\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(data==null){
throw new IllegalArgumentException("The \'data\' is null.");
}

1.5938886664887109
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/DefaultIntervalXYDataset.java<411,413>


-------- Repeated Patch ---------
if(data<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<start){
throw new IllegalArgumentException("The \'data\' is null.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(data==null){
throw new IllegalArgumentException("The \'data\' is null.");
}

1.5938886664887109
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/DefaultXYDataset.java<257,259>


-------- Repeated Patch ---------
if(data<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<start){
throw new IllegalArgumentException("The \'data\' is null.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(data<start){
throw new IllegalArgumentException("The \'data\' is null.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(data==null){
throw new IllegalArgumentException("The \'data\' is null.");
}

1.5938886664887109
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/DefaultXYZDataset.java<301,303>


-------- Repeated Patch ---------
if(data<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<start){
throw new IllegalArgumentException("The \'data\' is null.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(data<start){
throw new IllegalArgumentException("The \'data\' is null.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(start==null){
throw new IllegalArgumentException("Null \'start\' argument.");
}

1.5938886664887109
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/TimeSeries.java<1091,1093>


-------- Patch ---------
if(end<start){
throw new IllegalArgumentException("Null \'start\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(end==null){
throw new IllegalArgumentException("Null \'end\' argument.");
}

1.5938886664887109
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/TimeSeries.java<1094,1096>


-------- Patch ---------
if(end<start){
throw new IllegalArgumentException("Null \'end\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
XYDataItem item=(XYDataItem)this.data.get(index);
return (XYDataItem)item.clone();

1.5934563530497265
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/XYSeries.java<619,620>

-------- No Patch ---------


-------- Similar Code ---------
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
return (TimeSeriesDataItem)item.clone();

1.5934563530497265
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/TimeSeries.java<389,390>

-------- No Patch ---------


-------- Similar Code ---------
XYSeries clone=(XYSeries)super.clone();
clone.data=(List)ObjectUtilities.deepClone(this.data);
return clone;

1.5889158011040614
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/XYSeries.java<908,910>

-------- No Patch ---------


-------- Similar Code ---------
VectorSeriesCollection clone=(VectorSeriesCollection)super.clone();
clone.data=(List)ObjectUtilities.deepClone(this.data);
return clone;

1.5889158011040614
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/VectorSeriesCollection.java<328,331>

-------- No Patch ---------


-------- Similar Code ---------
YIntervalSeriesCollection clone=(YIntervalSeriesCollection)super.clone();
clone.data=(List)ObjectUtilities.deepClone(this.data);
return clone;

1.5889158011040614
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/YIntervalSeriesCollection.java<353,356>

-------- No Patch ---------


-------- Similar Code ---------
XIntervalSeriesCollection clone=(XIntervalSeriesCollection)super.clone();
clone.data=(List)ObjectUtilities.deepClone(this.data);
return clone;

1.5889158011040614
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/XIntervalSeriesCollection.java<355,358>

-------- No Patch ---------


-------- Similar Code ---------
TimeSeries clone=(TimeSeries)super.clone();
clone.data=(List)ObjectUtilities.deepClone(this.data);
return clone;

1.5889158011040614
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/TimeSeries.java<1031,1033>

-------- No Patch ---------


-------- Similar Code ---------
OHLCSeriesCollection clone=(OHLCSeriesCollection)super.clone();
clone.data=(List)ObjectUtilities.deepClone(this.data);
return clone;

1.5889158011040614
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/ohlc/OHLCSeriesCollection.java<485,488>

-------- No Patch ---------


-------- Similar Code ---------
if(data==null){
throw new IllegalArgumentException("Null \'data\' array.");
}
if(data.length==0){
throw new IllegalArgumentException("Zero length \'data\' array.");
}
double avg=calculateMean(data);
double sum=0.0;
for(int counter=0;counter<data.length;counter++){
double diff=data[counter].doubleValue()-avg;
sum=sum+diff*diff;
}

1.5872247666109556
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/statistics/Statistics.java<310,322>


-------- Repeated Patch ---------
if(data<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(length<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<start){
throw new IllegalArgumentException("Zero length \'data\' array.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(data==null){
throw new IllegalArgumentException("Null \'data\' array.");
}
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(series==null){
throw new IllegalArgumentException("Null \'series\' argument.");
}
return this.data.indexOf(series);

1.5872180461614258
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/VectorSeriesCollection.java<183,186>


-------- Patch ---------
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(series==null){
throw new IllegalArgumentException("Null \'series\' argument.");
}
return this.data.indexOf(series);

1.5872180461614258
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/XYSeriesCollection.java<241,244>


-------- Repeated Patch ---------
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(series<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(series==null){
throw new IllegalArgumentException("Null \'series\' argument.");
}
return this.data.indexOf(series);

1.5872180461614258
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/TimeSeriesCollection.java<259,262>


-------- Repeated Patch ---------
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
clone.datasets=(ValueDataset[])this.datasets.clone();
clone.seriesNeedle=(MeterNeedle[])this.seriesNeedle.clone();
for(int i=0;i<this.datasets.length;++i){
if(clone.datasets[i]!=null){
clone.datasets[i].addChangeListener(clone);
}
}

1.5713617498152341
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/plot/CompassPlot.java<821,829>


-------- Patch ---------
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
clone.datasets=(ValueDataset[])this.datasets.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(position<0||position>this.data.size()){
throw new IllegalArgumentException("\'position\' out of bounds.");
}

1.568236893836114
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/KeyedObjects.java<229,231>


-------- Patch ---------
if(position<position){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(position<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<position){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<start){
throw new IllegalArgumentException("\'position\' out of bounds.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(data[0].length!=data[1].length){
throw new IllegalArgumentException("The \'data\' array must contain two arrays with equal length.");
}

1.5583672763401877
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/DefaultXYDataset.java<264,267>


-------- Patch ---------
if(end<start){
throw new IllegalArgumentException("The \'data\' array must contain two arrays with equal length.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(collection==null){
throw new IllegalArgumentException("Null \'collection\' argument.");
}
 final Collection result=(Collection)ObjectUtilities.clone(collection);
result.clear();
 final Iterator iterator=collection.iterator();

1.5527353343538879
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/util/ObjectUtilities.java<203,212>


-------- Patch ---------
if(collection<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<start){
throw new IllegalArgumentException("Null \'collection\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
copy.clear();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
{
PolarPlot clone=(PolarPlot)super.clone();
if(this.axis!=null){
clone.axis=(ValueAxis)ObjectUtilities.clone(this.axis);
clone.axis.setPlot(clone);
clone.axis.addChangeListener(clone);
}
if(clone.dataset!=null){
clone.dataset.addChangeListener(clone);
}
if(this.renderer!=null){
clone.renderer=(PolarItemRenderer)ObjectUtilities.clone(this.renderer);
}
clone.cornerTextItems=new ArrayList(this.cornerTextItems);
return clone;
}

1.5513362791696417
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/plot/PolarPlot.java<1060,1081>


-------- Repeated Patch ---------
if(clone<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(dataset<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(dataset<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(key==null){
throw new IllegalArgumentException("Null \'key\' argument.");
}
SelectableValue dataItem=(SelectableValue)this.data.getObject(key);
return dataItem.getValue();

1.5211646547260909
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/pie/DefaultPieDataset.java<187,191>


-------- Patch ---------
if(key<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<start){
throw new IllegalArgumentException("Null \'key\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(period==null){
throw new IllegalArgumentException("Null \'period\' argument.");
}
TimeSeriesDataItem dummy=new TimeSeriesDataItem(period,Integer.MIN_VALUE);
return Collections.binarySearch(this.data,dummy);

1.5064885207394871
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/TimeSeries.java<519,524>


-------- Patch ---------
if(period<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<start){
throw new IllegalArgumentException("Null \'period\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if((series<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds");
}
return (TaskSeries)this.data.get(series);

1.5064102564102564
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/gantt/TaskSeriesCollection.java<124,127>


-------- Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<start){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if((series<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds");
}
return (VectorSeries)this.data.get(series);

1.5064102564102564
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/VectorSeriesCollection.java<152,155>


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<start){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(series<start){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<series){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<start){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<series){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(series<series){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<start){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<series){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if((series<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds");
}
return (XYIntervalSeries)this.data.get(series);

1.5064102564102564
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/XYIntervalSeriesCollection.java<113,116>


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<start){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<start){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<series){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<start){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<series){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<start){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<series){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if((series<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds");
}
return (YIntervalSeries)this.data.get(series);

1.5064102564102564
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/YIntervalSeriesCollection.java<113,116>


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<start){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<start){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<series){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<start){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<series){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<start){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<series){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if((series<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds");
}
return (XIntervalSeries)this.data.get(series);

1.5064102564102564
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/XIntervalSeriesCollection.java<111,114>


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<start){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<start){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<series){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<start){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<series){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<start){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<series){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if((series<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds");
}
return (XYSeries)this.data.get(series);

1.5064102564102564
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/XYSeriesCollection.java<258,261>


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<start){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<start){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<series){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<start){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<series){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<start){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<series){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if((series<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Index outside valid range.");
}
return (XYSeries)this.data.get(series);

1.5064102564102564
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/DefaultTableXYDataset.java<244,247>


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<start){
throw new IllegalArgumentException("Index outside valid range.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if((series<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Index \'series\' out of range.");
}
return (TimePeriodValues)this.data.get(series);

1.5064102564102564
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/TimePeriodValuesCollection.java<152,155>


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<start){
throw new IllegalArgumentException("Index \'series\' out of range.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if((series<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds");
}
return (OHLCSeries)this.data.get(series);

1.5064102564102564
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/ohlc/OHLCSeriesCollection.java<148,151>


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<start){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<start){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<series){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<start){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<series){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<start){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<series){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<series){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
this.data=new java.util.ArrayList();
this.xPosition=TimePeriodAnchor.MIDDLE;
if(series!=null){
this.data.add(series);
series.addChangeListener(this);
}

1.504958746780277
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/TimePeriodValuesCollection.java<102,107>


-------- Repeated Patch ---------
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
this.data=TimePeriodAnchor.MIDDLE;
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
int n=data.getItemCount(series);
if(n<2){
throw new IllegalArgumentException("Not enough data.");
}
double sumX=0;
double sumY=0;

1.496417128333929
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/statistics/Regression.java<110,116>


-------- Patch ---------
if(n<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<start){
throw new IllegalArgumentException("Not enough data.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
int n=data.getItemCount(series);
if(n<2){
throw new IllegalArgumentException("Not enough data.");
}
double sumX=0;
double sumY=0;

1.496417128333929
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/statistics/Regression.java<197,203>


-------- Repeated Patch ---------
if(n<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<start){
throw new IllegalArgumentException("Not enough data.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(n<start){
throw new IllegalArgumentException("Not enough data.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if((series<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("The \'series\' argument is out of bounds ("+series);
}
return (TimeSeries)this.data.get(series);

1.4934490278424946
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/TimeSeriesCollection.java<273,277>

-------- No Patch ---------


-------- Similar Code ---------
DefaultOHLCDataset clone=(DefaultOHLCDataset)super.clone();
clone.data=new OHLCDataItem[this.data.length];
System.arraycopy(this.data,0,clone.data,0,this.data.length);
return clone;

1.4808723237868295
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/DefaultOHLCDataset.java<333,336>

-------- No Patch ---------


-------- Similar Code ---------
if(series==null){
throw new IllegalArgumentException("Null \'series\' argument.");
}
if(series.getAllowDuplicateXValues()){
throw new IllegalArgumentException("Cannot accept XYSeries that allow duplicate values. "+"Use XYSeries(seriesName, <sort>, false) constructor.");
}
updateXPoints(series);
this.data.add(series);
series.addChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());

1.4623533979092809
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/DefaultTableXYDataset.java<146,158>

-------- No Patch ---------


-------- Similar Code ---------
HistogramDataset clone=(HistogramDataset)super.clone();
int seriesCount=getSeriesCount();
clone.list=new java.util.ArrayList(seriesCount);
for(int i=0;i<seriesCount;i++){
clone.list.add(new HashMap((Map)this.list.get(i)));
}
return clone;

1.4549201229863187
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/statistics/HistogramDataset.java<499,505>


-------- Patch ---------
clone.list=new java.util.ArrayList(start);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(data==null){
throw new IllegalArgumentException("Null \'data\' argument.");
}
Number[] result=new Number[data.length];
for(int i=0;i<data.length;i++){
result[i]=new Double(data[i]);
}
return result;

1.4541513251679272
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/DataUtilities.java<233,240>


-------- Repeated Patch ---------
if(data<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<start){
throw new IllegalArgumentException("Null \'data\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(data<start){
throw new IllegalArgumentException("Null \'data\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(maximum<0){
throw new IllegalArgumentException("Negative \'maximum\' argument.");
}
this.maximumItemCount=maximum;
int count=this.data.size();
if(count>maximum){
delete(0,count-maximum);
}

1.4490395732496104
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/TimeSeries.java<292,299>


-------- Patch ---------
if(count<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<maximum){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(text==null){
throw new IllegalArgumentException("Null \'text\' argument.");
}
TextBlock result=new TextBlock();
String input=text;
boolean moreInputToProcess=(text.length()>0);
int start=0;

1.4461008514027778
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/text/TextUtilities.java<116,122>


-------- Patch ---------
if(text<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<start){
throw new IllegalArgumentException("Null \'text\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(this.toolTipGeneratorList!=null){
clone.toolTipGeneratorList=(ObjectList)this.toolTipGeneratorList.clone();
}

1.4434563530497264
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java<1703,1706>

-------- No Patch ---------


-------- Similar Code ---------
if(this.urlGeneratorList!=null){
clone.urlGeneratorList=(ObjectList)this.urlGeneratorList.clone();
}

1.4434563530497264
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java<1721,1723>

-------- No Patch ---------


-------- Similar Code ---------
if(this.paintList!=null){
clone.paintList=(PaintList)this.paintList.clone();
}

1.4434563530497264
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/renderer/AbstractRenderer.java<3175,3177>

-------- No Patch ---------


-------- Similar Code ---------
if(this.fillPaintList!=null){
clone.fillPaintList=(PaintList)this.fillPaintList.clone();
}

1.4434563530497264
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/renderer/AbstractRenderer.java<3180,3182>

-------- No Patch ---------


-------- Similar Code ---------
if(this.outlinePaintList!=null){
clone.outlinePaintList=(PaintList)this.outlinePaintList.clone();
}

1.4434563530497264
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/renderer/AbstractRenderer.java<3184,3186>

-------- No Patch ---------


-------- Similar Code ---------
if(this.strokeList!=null){
clone.strokeList=(StrokeList)this.strokeList.clone();
}

1.4434563530497264
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/renderer/AbstractRenderer.java<3190,3192>

-------- No Patch ---------


-------- Similar Code ---------
if(this.outlineStrokeList!=null){
clone.outlineStrokeList=(StrokeList)this.outlineStrokeList.clone();
}

1.4434563530497264
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/renderer/AbstractRenderer.java<3196,3199>

-------- No Patch ---------


-------- Similar Code ---------
if(this.shapeList!=null){
clone.shapeList=(ShapeList)this.shapeList.clone();
}

1.4434563530497264
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/renderer/AbstractRenderer.java<3202,3204>

-------- No Patch ---------


-------- Similar Code ---------
if(this.itemLabelsVisibleList!=null){
clone.itemLabelsVisibleList=(BooleanList)this.itemLabelsVisibleList.clone();
}

1.4434563530497264
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/renderer/AbstractRenderer.java<3210,3213>

-------- No Patch ---------


-------- Similar Code ---------
if(this.itemLabelFontList!=null){
clone.itemLabelFontList=(ObjectList)this.itemLabelFontList.clone();
}

1.4434563530497264
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/renderer/AbstractRenderer.java<3217,3220>

-------- No Patch ---------


-------- Similar Code ---------
if(this.itemLabelPaintList!=null){
clone.itemLabelPaintList=(PaintList)this.itemLabelPaintList.clone();
}

1.4434563530497264
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/renderer/AbstractRenderer.java<3224,3227>

-------- No Patch ---------


-------- Similar Code ---------
if(this.positiveItemLabelPositionList!=null){
clone.positiveItemLabelPositionList=(ObjectList)this.positiveItemLabelPositionList.clone();
}

1.4434563530497264
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/renderer/AbstractRenderer.java<3231,3234>

-------- No Patch ---------


-------- Similar Code ---------
if(this.negativeItemLabelPositionList!=null){
clone.negativeItemLabelPositionList=(ObjectList)this.negativeItemLabelPositionList.clone();
}

1.4434563530497264
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/renderer/AbstractRenderer.java<3238,3241>

-------- No Patch ---------


-------- Similar Code ---------
if(this.createEntitiesList!=null){
clone.createEntitiesList=(BooleanList)this.createEntitiesList.clone();
}

1.4434563530497264
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/renderer/AbstractRenderer.java<3244,3247>

-------- No Patch ---------


-------- Similar Code ---------
if(this.legendShapeList!=null){
clone.legendShapeList=(ShapeList)this.legendShapeList.clone();
}

1.4434563530497264
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/renderer/AbstractRenderer.java<3249,3251>

-------- No Patch ---------


-------- Similar Code ---------
if(this.legendTextPaint!=null){
clone.legendTextPaint=(PaintList)this.legendTextPaint.clone();
}

1.4434563530497264
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/renderer/AbstractRenderer.java<3255,3257>

-------- No Patch ---------


-------- Similar Code ---------
if(this.xDateFormat!=null){
clone.xDateFormat=(DateFormat)this.xDateFormat.clone();
}

1.4434563530497264
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/labels/AbstractXYItemLabelGenerator.java<370,372>

-------- No Patch ---------


-------- Similar Code ---------
if(this.yDateFormat!=null){
clone.yDateFormat=(DateFormat)this.yDateFormat.clone();
}

1.4434563530497264
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/labels/AbstractXYItemLabelGenerator.java<373,375>

-------- No Patch ---------


-------- Similar Code ---------
if(this.a1!=null){
clone.a1=(Area)this.a1.clone();
}

1.4434563530497264
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/plot/CompassPlot.java<812,814>

-------- No Patch ---------


-------- Similar Code ---------
if(this.a2!=null){
clone.a2=(Area)this.a2.clone();
}

1.4434563530497264
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/plot/CompassPlot.java<815,817>

-------- No Patch ---------


-------- Similar Code ---------
if(this.rect1!=null){
clone.rect1=(Rectangle2D)this.rect1.clone();
}

1.4434563530497264
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/plot/CompassPlot.java<818,820>

-------- No Patch ---------


-------- Similar Code ---------
if(data==null){
throw new IllegalArgumentException("Null \'data\' argument.");
}
int l1=data.length;
Number[][] result=new Number[l1][];
for(int i=0;i<l1;i++){
result[i]=createNumberArray(data[i]);
}
return result;

1.4364498902897729
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/DataUtilities.java<252,260>


-------- Repeated Patch ---------
if(data<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<start){
throw new IllegalArgumentException("Null \'data\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(data<start){
throw new IllegalArgumentException("Null \'data\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(this.baseShape!=null){
clone.baseShape=ShapeUtilities.clone(this.baseShape);
}

1.4355285539274978
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/renderer/AbstractRenderer.java<3205,3207>

-------- No Patch ---------


-------- Similar Code ---------
if(this.fixedRangeAxisSpace!=null){
clone.fixedRangeAxisSpace=(AxisSpace)ObjectUtilities.clone(this.fixedRangeAxisSpace);
}

1.4355285539274978
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/plot/CategoryPlot.java<5149,5152>

-------- No Patch ---------


-------- Similar Code ---------
if(this.fixedDomainAxisSpace!=null){
clone.fixedDomainAxisSpace=(AxisSpace)ObjectUtilities.clone(this.fixedDomainAxisSpace);
}

1.4355285539274978
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/plot/XYPlot.java<5707,5710>

-------- No Patch ---------


-------- Similar Code ---------
if(this.renderer!=null){
clone.renderer=(PolarItemRenderer)ObjectUtilities.clone(this.renderer);
}

1.4355285539274978
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/plot/PolarPlot.java<1073,1076>

-------- No Patch ---------


-------- Similar Code ---------
if(this.legendLabelGenerator!=null){
clone.legendLabelGenerator=(PieSectionLabelGenerator)ObjectUtilities.clone(this.legendLabelGenerator);
}

1.4355285539274978
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/plot/PiePlot.java<3645,3648>

-------- No Patch ---------


-------- Similar Code ---------
if(this.legendLabelToolTipGenerator!=null){
clone.legendLabelToolTipGenerator=(PieSectionLabelGenerator)ObjectUtilities.clone(this.legendLabelToolTipGenerator);
}

1.4355285539274978
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/plot/PiePlot.java<3649,3652>

-------- No Patch ---------


-------- Similar Code ---------
if(shape instanceof Cloneable){
try{
return (Shape)ObjectUtilities.clone(shape);
}catch (CloneNotSupportedException cnse) {
}

}

1.4326427425370878
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/util/ShapeUtilities.java<104,110>

-------- No Patch ---------


-------- Similar Code ---------
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

return clone;

1.4326427425370878
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/XYDataItem.java<252,259>

-------- No Patch ---------


-------- Similar Code ---------
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

return clone;

1.4326427425370878
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/TimePeriodValue.java<172,179>

-------- No Patch ---------


-------- Similar Code ---------
Object clone=null;
try{
clone=super.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

return clone;

1.4326427425370878
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/TimeSeriesDataItem.java<266,273>

-------- No Patch ---------


-------- Similar Code ---------
item=(XYDataItem)item.clone();
if(this.autoSort){
this.data.add(-index-1,item);
}else {
this.data.add(item);
}

1.4309493362512626
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/XYSeries.java<833,839>

-------- No Patch ---------


-------- Similar Code ---------
if(data[0].length!=data[1].length||data[0].length!=data[2].length){
throw new IllegalArgumentException("The \'data\' array must contain "+"three arrays all having the same length.");
}

1.4257484331484656
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/DefaultXYZDataset.java<308,312>

-------- No Patch ---------


-------- Similar Code ---------
if(series==null){
throw new IllegalArgumentException("Null \'series\' argument.");
}
this.data.add(series);
series.addChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());

1.4245003270420487
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/VectorSeriesCollection.java<81,86>


-------- Repeated Patch ---------
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
this.data.add(start);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
start.addChangeListener(this);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(series==null){
throw new IllegalArgumentException("Null \'series\' argument.");
}
this.data.add(series);
series.addChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());

1.4245003270420487
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/XYIntervalSeriesCollection.java<84,89>


-------- Repeated Patch ---------
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
start.addChangeListener(this);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
this.data.add(start);
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
start.addChangeListener(this);
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
this.data.add(start);
if(end<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
start.addChangeListener(this);
if(end<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
this.data.add(start);
start.addChangeListener(this);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
this.data.add(start);
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
start.addChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
this.data.add(start);
if(series<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
start.addChangeListener(this);
if(series<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(series<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
this.data.add(start);
start.addChangeListener(this);
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
this.data.add(start);
fireDatasetChanged(new DatasetChangeInfo());
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
start.addChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
this.data.add(start);
start.addChangeListener(this);
if(end<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
this.data.add(start);
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
start.addChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
this.data.add(start);
start.addChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
this.data.add(start);
start.addChangeListener(this);
if(series<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
this.data.add(start);
fireDatasetChanged(new DatasetChangeInfo());
if(series<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
start.addChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
if(series<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
this.data.add(start);
start.addChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
this.data.add(start);
start.addChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(series==null){
throw new IllegalArgumentException("Null \'series\' argument.");
}
this.data.add(series);
series.addChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());

1.4245003270420487
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/YIntervalSeriesCollection.java<84,89>


-------- Repeated Patch ---------
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
start.addChangeListener(this);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
start.addChangeListener(this);
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
if(end<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
start.addChangeListener(this);
if(end<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
start.addChangeListener(this);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
start.addChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
if(series<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
start.addChangeListener(this);
if(series<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(series<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
start.addChangeListener(this);
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
fireDatasetChanged(new DatasetChangeInfo());
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
start.addChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
start.addChangeListener(this);
if(end<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
start.addChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
start.addChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
start.addChangeListener(this);
if(series<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
fireDatasetChanged(new DatasetChangeInfo());
if(series<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
start.addChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
if(series<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
start.addChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
start.addChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(series==null){
throw new IllegalArgumentException("Null \'series\' argument.");
}
this.data.add(series);
series.addChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());

1.4245003270420487
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/XIntervalSeriesCollection.java<82,87>


-------- Repeated Patch ---------
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
start.addChangeListener(this);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
start.addChangeListener(this);
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
if(end<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
start.addChangeListener(this);
if(end<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
start.addChangeListener(this);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
start.addChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
if(series<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
start.addChangeListener(this);
if(series<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(series<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
start.addChangeListener(this);
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
fireDatasetChanged(new DatasetChangeInfo());
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
start.addChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
start.addChangeListener(this);
if(end<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
start.addChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
start.addChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
start.addChangeListener(this);
if(series<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
fireDatasetChanged(new DatasetChangeInfo());
if(series<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
start.addChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
if(series<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
start.addChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
start.addChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(series==null){
throw new IllegalArgumentException("Null \'series\' argument.");
}
this.data.add(series);
series.addChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());

1.4245003270420487
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/XYSeriesCollection.java<148,153>


-------- Repeated Patch ---------
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
start.addChangeListener(this);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
start.addChangeListener(this);
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
if(end<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
start.addChangeListener(this);
if(end<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
start.addChangeListener(this);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
start.addChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
if(series<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
start.addChangeListener(this);
if(series<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(series<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
start.addChangeListener(this);
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
fireDatasetChanged(new DatasetChangeInfo());
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
start.addChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
start.addChangeListener(this);
if(end<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
start.addChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
start.addChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
start.addChangeListener(this);
if(series<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
fireDatasetChanged(new DatasetChangeInfo());
if(series<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
start.addChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
if(series<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
start.addChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
start.addChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(series==null){
throw new IllegalArgumentException("Null \'series\' argument.");
}
this.data.add(series);
series.addChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());

1.4245003270420487
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/TimeSeriesCollection.java<321,326>


-------- Repeated Patch ---------
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
start.addChangeListener(this);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
start.addChangeListener(this);
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
if(end<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
start.addChangeListener(this);
if(end<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
start.addChangeListener(this);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
start.addChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
if(series<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
start.addChangeListener(this);
if(series<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(series<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
start.addChangeListener(this);
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
fireDatasetChanged(new DatasetChangeInfo());
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
start.addChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
start.addChangeListener(this);
if(end<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
start.addChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
start.addChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
start.addChangeListener(this);
if(series<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
fireDatasetChanged(new DatasetChangeInfo());
if(series<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
start.addChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
if(series<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
start.addChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
start.addChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(series==null){
throw new IllegalArgumentException("Null \'series\' argument.");
}
this.data.remove(series);
series.removeChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());

1.4245003270420487
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/TimeSeriesCollection.java<337,342>


-------- Repeated Patch ---------
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
this.data.remove(start);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
start.removeChangeListener(this);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(series<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(series==null){
throw new IllegalArgumentException("Null \'series\' argument.");
}
this.data.add(series);
series.addChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());

1.4245003270420487
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/TimePeriodValuesCollection.java<179,185>


-------- Repeated Patch ---------
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
start.addChangeListener(this);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
start.addChangeListener(this);
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
if(end<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
start.addChangeListener(this);
if(end<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
start.addChangeListener(this);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
start.addChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
if(series<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
start.addChangeListener(this);
if(series<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(series<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
start.addChangeListener(this);
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
fireDatasetChanged(new DatasetChangeInfo());
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
start.addChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
start.addChangeListener(this);
if(end<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
start.addChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
start.addChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
start.addChangeListener(this);
if(series<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
fireDatasetChanged(new DatasetChangeInfo());
if(series<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
start.addChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
if(series<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
start.addChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
start.addChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(series==null){
throw new IllegalArgumentException("Null \'series\' argument.");
}
this.data.remove(series);
series.removeChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());

1.4245003270420487
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/TimePeriodValuesCollection.java<197,202>


-------- Repeated Patch ---------
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.remove(start);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
start.removeChangeListener(this);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
this.data.remove(start);
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
start.removeChangeListener(this);
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
this.data.remove(start);
if(end<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
start.removeChangeListener(this);
if(end<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
this.data.remove(start);
start.removeChangeListener(this);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
this.data.remove(start);
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
start.removeChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
this.data.remove(start);
if(series<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
start.removeChangeListener(this);
if(series<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(series<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
this.data.remove(start);
start.removeChangeListener(this);
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
this.data.remove(start);
fireDatasetChanged(new DatasetChangeInfo());
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
start.removeChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
this.data.remove(start);
start.removeChangeListener(this);
if(end<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
this.data.remove(start);
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
start.removeChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
this.data.remove(start);
start.removeChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
this.data.remove(start);
start.removeChangeListener(this);
if(series<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
this.data.remove(start);
fireDatasetChanged(new DatasetChangeInfo());
if(series<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
start.removeChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
if(series<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
this.data.remove(start);
start.removeChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
this.data.remove(start);
start.removeChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(series==null){
throw new IllegalArgumentException("Null \'series\' argument.");
}
this.data.add(series);
series.addChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());

1.4245003270420487
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/ohlc/OHLCSeriesCollection.java<119,124>


-------- Repeated Patch ---------
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
start.addChangeListener(this);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
start.addChangeListener(this);
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
if(end<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
start.addChangeListener(this);
if(end<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
start.addChangeListener(this);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
start.addChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
if(series<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
start.addChangeListener(this);
if(series<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(series<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
start.addChangeListener(this);
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
fireDatasetChanged(new DatasetChangeInfo());
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
start.addChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
start.addChangeListener(this);
if(end<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
start.addChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
start.addChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
start.addChangeListener(this);
if(series<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
fireDatasetChanged(new DatasetChangeInfo());
if(series<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
start.addChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
if(series<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
start.addChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
start.addChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(this.legendItemLabelGenerator instanceof PublicCloneable){
clone.legendItemLabelGenerator=(CategorySeriesLabelGenerator)ObjectUtilities.clone(this.legendItemLabelGenerator);
}

1.4217866018475815
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java<1736,1739>

-------- No Patch ---------


-------- Similar Code ---------
if(this.legendItemToolTipGenerator instanceof PublicCloneable){
clone.legendItemToolTipGenerator=(CategorySeriesLabelGenerator)ObjectUtilities.clone(this.legendItemToolTipGenerator);
}

1.4217866018475815
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java<1740,1743>

-------- No Patch ---------


-------- Similar Code ---------
if(this.legendItemURLGenerator instanceof PublicCloneable){
clone.legendItemURLGenerator=(CategorySeriesLabelGenerator)ObjectUtilities.clone(this.legendItemURLGenerator);
}

1.4217866018475815
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java<1744,1747>

-------- No Patch ---------


-------- Similar Code ---------
if(this.legendLabelURLGenerator instanceof PublicCloneable){
clone.legendLabelURLGenerator=(PieURLGenerator)ObjectUtilities.clone(this.legendLabelURLGenerator);
}

1.4217866018475815
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/plot/PiePlot.java<3653,3656>

-------- No Patch ---------


-------- Similar Code ---------
if(this.drawingSupplier instanceof PublicCloneable){
PublicCloneable pc=(PublicCloneable)this.drawingSupplier;
try{
result=(DrawingSupplier)pc.clone();
}catch (CloneNotSupportedException e) {
  e.printStackTrace();
}

}

1.4217866018475815
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/StandardChartTheme.java<1102,1110>

-------- No Patch ---------


-------- Similar Code ---------
if(series==null){
throw new IllegalArgumentException("Null \'series\' argument.");
}
this.data.add(series);
series.addChangeListener(this);
Iterator iterator=series.getTasks().iterator();

1.4209195467257716
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/gantt/TaskSeriesCollection.java<252,259>

-------- No Patch ---------


-------- Similar Code ---------
{
 final PublicCloneable pc=(PublicCloneable)object;
return pc.clone();
}

1.4173286442120083
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/util/ObjectUtilities.java<165,168>

-------- No Patch ---------


-------- Similar Code ---------
Rectangle2D target=(Rectangle2D)area.clone();
Rectangle2D hotspot=(Rectangle2D)area.clone();
StandardEntityCollection sec=null;
if(params instanceof EntityBlockParams&&((EntityBlockParams)params).getGenerateEntities()){
sec=new StandardEntityCollection();
sec.add(new TitleEntity(hotspot,this));
}

1.4153805173197265
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/title/LegendTitle.java<530,537>


-------- Patch ---------
if(end<((EntityBlockParams)start).getGenerateEntities()){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
SegmentedTimeline clone=(SegmentedTimeline)super.clone();
return clone;

1.4152086306448588
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/axis/SegmentedTimeline.java<1219,1220>

-------- No Patch ---------


-------- Similar Code ---------
if(start<=end){
return new SegmentRange(start,end);
}else {
return null;
}

1.4152086306448588
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/axis/SegmentedTimeline.java<1678,1683>


-------- Patch ---------
if(end<=start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(start<=end){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<start){
if(start<=end){
return new SegmentRange(start,end);
}else {
return null;
}
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<start){
if(start<=end){
return new SegmentRange(start,end);
}else {
return null;
}
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
Tick clone=(Tick)super.clone();
return clone;

1.4152086306448588
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/axis/Tick.java<174,175>

-------- No Patch ---------


-------- Similar Code ---------
ValueAxis clone=(ValueAxis)super.clone();
return clone;

1.4152086306448588
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/axis/ValueAxis.java<1714,1715>

-------- No Patch ---------


-------- Similar Code ---------
BlockContainer clone=(BlockContainer)super.clone();
return clone;

1.4152086306448588
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/block/BlockContainer.java<277,279>

-------- No Patch ---------


-------- Similar Code ---------
DefaultDrawingSupplier clone=(DefaultDrawingSupplier)super.clone();
return clone;

1.4152086306448588
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/plot/DefaultDrawingSupplier.java<544,545>

-------- No Patch ---------


-------- Similar Code ---------
Task clone=(Task)super.clone();
return clone;

1.4152086306448588
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/gantt/Task.java<253,254>

-------- No Patch ---------


-------- Similar Code ---------
DefaultKeyedValueDataset clone=(DefaultKeyedValueDataset)super.clone();
return clone;

1.4152086306448588
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/general/DefaultKeyedValueDataset.java<191,193>

-------- No Patch ---------


-------- Similar Code ---------
DefaultKeyedValue clone=(DefaultKeyedValue)super.clone();
return clone;

1.4152086306448588
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/DefaultKeyedValue.java<163,164>

-------- No Patch ---------


-------- Similar Code ---------
if(clone.legendItemLabelGenerator instanceof PublicCloneable){
clone.legendItemLabelGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemLabelGenerator);
}

1.4114654303752998
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java<1720,1723>

-------- No Patch ---------


-------- Similar Code ---------
if(clone.legendItemURLGenerator instanceof PublicCloneable){
clone.legendItemURLGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemURLGenerator);
}

1.4114654303752998
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java<1746,1749>

-------- No Patch ---------


-------- Similar Code ---------
if(series==null){
throw new IllegalArgumentException("Null \'series\' argument.");
}
boolean removed=this.data.remove(series);
if(removed){
series.removeChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
}
return removed;

1.4103679668049307
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/VectorSeriesCollection.java<100,109>


-------- Repeated Patch ---------
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(data){
start.removeChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
}
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(series==null){
throw new IllegalArgumentException("Null \'series\' argument.");
}
boolean removed=this.data.remove(series);
if(removed){
series.removeChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
}
return removed;

1.4103679668049307
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/ohlc/OHLCSeriesCollection.java<404,413>


-------- Repeated Patch ---------
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(data){
start.removeChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
}
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(series<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(data){
start.removeChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
}
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(data){
start.removeChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
}
if(end<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(data){
start.removeChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
}
if(series<start){
throw new IllegalArgumentException("Null \'series\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(length!=data[1].length||length!=data[2].length||length!=data[3].length||length!=data[4].length||length!=data[5].length){
throw new IllegalArgumentException("The \'data\' array must contain six arrays with equal length.");
}

1.4074067506724535
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/DefaultIntervalXYDataset.java<419,424>

-------- No Patch ---------


-------- Similar Code ---------
if(this.baseToolTipGenerator!=null&&this.baseToolTipGenerator instanceof PublicCloneable){
PublicCloneable pc=(PublicCloneable)this.baseToolTipGenerator;
clone.baseToolTipGenerator=(XYToolTipGenerator)pc.clone();
}

1.404111837092037
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java<1714,1718>

-------- No Patch ---------


-------- Similar Code ---------
CategoryPlot clone=(CategoryPlot)super.clone();
clone.domainAxes=new ObjectList();
for(int i=0;i<this.domainAxes.size();i++){
CategoryAxis xAxis=(CategoryAxis)this.domainAxes.get(i);
if(xAxis!=null){
CategoryAxis clonedAxis=(CategoryAxis)xAxis.clone();
clone.setDomainAxis(i,clonedAxis);
}
}

1.3995783103262829
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/plot/CategoryPlot.java<5098,5107>


-------- Patch ---------
if(xAxis<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
clone.domainAxes=new ObjectList();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(rowKeys.length!=data.length){
throw new IllegalArgumentException("The number of row keys does not match the number of rows in "+"the data array.");
}

1.396717661308488
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/general/DatasetUtilities.java<439,443>


-------- Patch ---------
if(length<length){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(rowKeys<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(length<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<data){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<length){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<start){
throw new IllegalArgumentException("The number of row keys does not match the number of rows in "+"the data array.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(length<data){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(length<length){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<length){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(length<length){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if((series<0)||(series>getSeriesCount())){
throw new IllegalArgumentException("Index outside valid range.");
}
XYSeries s=(XYSeries)this.data.get(series);
s.removeChangeListener(this);
this.data.remove(series);

1.3934484048776983
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/DefaultTableXYDataset.java<404,411>


-------- Patch ---------
data.removeChangeListener(this);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
{
DefaultTableXYDataset clone=(DefaultTableXYDataset)super.clone();
int seriesCount=this.data.size();
clone.data=new java.util.ArrayList(seriesCount);
for(int i=0;i<seriesCount;i++){
XYSeries series=(XYSeries)this.data.get(i);
clone.data.add(series.clone());
}
clone.intervalDelegate=new IntervalXYDelegate(clone);
clone.intervalDelegate.setFixedIntervalWidth(getIntervalWidth());
clone.intervalDelegate.setAutoWidth(isAutoWidth());
clone.intervalDelegate.setIntervalPositionFactor(getIntervalPositionFactor());
clone.updateXPoints();
return clone;
}

1.3865398677209058
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/DefaultTableXYDataset.java<544,561>

-------- No Patch ---------


-------- Similar Code ---------
if(this.baseItemLabelGenerator instanceof PublicCloneable){
PublicCloneable pc=(PublicCloneable)this.baseItemLabelGenerator;
clone.baseItemLabelGenerator=(CategoryItemLabelGenerator)pc.clone();
}else {
throw new CloneNotSupportedException("ItemLabelGenerator not cloneable.");
}

1.3786903278538918
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java<1691,1700>

-------- No Patch ---------


-------- Similar Code ---------
if(this.baseToolTipGenerator instanceof PublicCloneable){
PublicCloneable pc=(PublicCloneable)this.baseToolTipGenerator;
clone.baseToolTipGenerator=(CategoryToolTipGenerator)pc.clone();
}else {
throw new CloneNotSupportedException("Base tool tip generator not cloneable.");
}

1.3786903278538918
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java<1709,1718>

-------- No Patch ---------


-------- Similar Code ---------
if(this.baseURLGenerator instanceof PublicCloneable){
PublicCloneable pc=(PublicCloneable)this.baseURLGenerator;
clone.baseURLGenerator=(CategoryURLGenerator)pc.clone();
}else {
throw new CloneNotSupportedException("Base item URL generator not cloneable.");
}

1.3786903278538918
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java<1726,1733>

-------- No Patch ---------


-------- Similar Code ---------
this.data=new java.util.ArrayList();
this.intervalDelegate=new IntervalXYDelegate(this,false);
addChangeListener(this.intervalDelegate);
if(series!=null){
this.data.add(series);
series.addChangeListener(this);
}
setSelectionState(this);

1.3733397182843543
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/XYSeriesCollection.java<115,122>


-------- Repeated Patch ---------
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
this.copy=new IntervalXYDelegate(this,false);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
addChangeListener(this.copy);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
setSelectionState(this);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
TimeSeriesDataItem existing=(TimeSeriesDataItem)this.data.get(index);
overwritten=(TimeSeriesDataItem)existing.clone();
boolean iterate=false;
Number oldYN=existing.getValue();
double oldY=oldYN!=null?oldYN.doubleValue():Double.NaN;

1.3666604542657188
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/TimeSeries.java<826,833>

-------- No Patch ---------


-------- Similar Code ---------
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
this.data.add(item);
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

1.356555913480621
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/TimePeriodValues.java<243,248>


-------- Patch ---------
if(item<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<start){
throw new IllegalArgumentException("Null item not allowed.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
this.data.add(start);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
updateBounds(start.getPeriod(),this.data.size()-1);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
fireSeriesChanged();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
int n=data.length;
if(n<2){
throw new IllegalArgumentException("Not enough data.");
}
double sumX=0;
double sumY=0;

1.3559209850218257
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/statistics/Regression.java<66,72>


-------- Repeated Patch ---------
if(n<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<start){
throw new IllegalArgumentException("Not enough data.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(n<start){
throw new IllegalArgumentException("Not enough data.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
int n=data.length;
if(n<2){
throw new IllegalArgumentException("Not enough data.");
}
double sumX=0;
double sumY=0;

1.3559209850218257
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/statistics/Regression.java<153,159>


-------- Repeated Patch ---------
if(n<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<start){
throw new IllegalArgumentException("Not enough data.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(n<start){
throw new IllegalArgumentException("Not enough data.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
AbstractAnnotation clone=(AbstractAnnotation)super.clone();
clone.listenerList=new EventListenerList();
return clone;

1.3559042387984865
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/annotations/AbstractAnnotation.java<192,194>

-------- No Patch ---------


-------- Similar Code ---------
Title duplicate=(Title)super.clone();
duplicate.listenerList=new EventListenerList();
return duplicate;

1.3559042387984865
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/title/Title.java<362,365>

-------- No Patch ---------


-------- Similar Code ---------
AbstractDialLayer clone=(AbstractDialLayer)super.clone();
clone.listenerList=new EventListenerList();
return clone;

1.3559042387984865
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/plot/dial/AbstractDialLayer.java<141,144>

-------- No Patch ---------


-------- Similar Code ---------
AbstractDataset clone=(AbstractDataset)super.clone();
clone.listenerList=new EventListenerList();
return clone;

1.3559042387984865
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/general/AbstractDataset.java<209,211>

-------- No Patch ---------


-------- Similar Code ---------
if(this.plot!=null){
chart.plot=(Plot)this.plot.clone();
chart.plot.addChangeListener(chart);
}

1.3544271444636666
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/JFreeChart.java<1732,1735>

-------- No Patch ---------


-------- Similar Code ---------
if(yAxis!=null){
ValueAxis clonedAxis=(ValueAxis)yAxis.clone();
clone.setRangeAxis(i,clonedAxis);
}

1.3523532664857336
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/plot/CategoryPlot.java<5114,5117>


-------- Patch ---------
if(yAxis<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
{
DefaultXYDataset clone=(DefaultXYDataset)super.clone();
clone.seriesKeys=new java.util.ArrayList(this.seriesKeys);
clone.seriesList=new ArrayList(this.seriesList.size());
for(int i=0;i<this.seriesList.size();i++){
double[][] data=(double[][])this.seriesList.get(i);
double[] x=data[0];
double[] y=data[1];
double[] xx=new double[x.length];
double[] yy=new double[y.length];
System.arraycopy(x,0,xx,0,x.length);
System.arraycopy(y,0,yy,0,y.length);
clone.seriesList.add(i,new double[][]{xx,yy});
}
return clone;
}

1.3517285570304836
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/DefaultXYDataset.java<362,377>

-------- No Patch ---------


-------- Similar Code ---------
ExtendedCategoryAxis clone=(ExtendedCategoryAxis)super.clone();
clone.sublabels=new HashMap(this.sublabels);
return clone;

1.349075559096034
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/axis/ExtendedCategoryAxis.java<228,230>


-------- Patch ---------
clone.sublabels=new HashMap(this.sublabels);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
Axis clone=(Axis)super.clone();
clone.plot=null;
clone.listenerList=new EventListenerList();
return clone;

1.3443843292997713
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/axis/Axis.java<1441,1445>


-------- Patch ---------
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
clone.plot=null;
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
LegendItemCollection clone=(LegendItemCollection)super.clone();
clone.items=(List)ObjectUtilities.deepClone(this.items);
return clone;

1.3389158011040614
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/LegendItemCollection.java<149,151>


-------- Patch ---------
clone.items=(List)ObjectUtilities.deepClone(this.items);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
TaskSeries clone=(TaskSeries)super.clone();
clone.tasks=(List)ObjectUtilities.deepClone(this.tasks);
return clone;

1.3389158011040614
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/gantt/TaskSeries.java<194,196>


-------- Patch ---------
clone.tasks=(List)ObjectUtilities.deepClone(this.tasks);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
SimpleHistogramDataset clone=(SimpleHistogramDataset)super.clone();
clone.bins=(List)ObjectUtilities.deepClone(this.bins);
return clone;

1.3389158011040614
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/statistics/SimpleHistogramDataset.java<558,560>


-------- Patch ---------
clone.bins=(List)ObjectUtilities.deepClone(this.bins);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
MatrixSeriesCollection clone=(MatrixSeriesCollection)super.clone();
clone.seriesList=(List)ObjectUtilities.deepClone(this.seriesList);
return clone;

1.3389158011040614
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/MatrixSeriesCollection.java<271,273>


-------- Patch ---------
clone.seriesList=(List)ObjectUtilities.deepClone(this.seriesList);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
AbstractObjectList clone=(AbstractObjectList)super.clone();
if(this.objects!=null){
clone.objects=new Object[this.objects.length];
System.arraycopy(this.objects,0,clone.objects,0,this.objects.length);
}
return clone;

1.338503792054333
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/util/AbstractObjectList.java<235,241>

-------- No Patch ---------


-------- Similar Code ---------
if(data.length==0){
throw new IllegalArgumentException("Zero length \'data\' array.");
}

1.3320502943378436
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/statistics/Statistics.java<313,315>


-------- Repeated Patch ---------
if(data<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(length<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<start){
throw new IllegalArgumentException("Zero length \'data\' array.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(length<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(data<start){
throw new IllegalArgumentException("Zero length \'data\' array.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(length<start){
throw new IllegalArgumentException("Zero length \'data\' array.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(length<start){
throw new IllegalArgumentException("Zero length \'data\' array.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(data.length!=6){
throw new IllegalArgumentException("The \'data\' array must have length == 6.");
}

1.3320502943378436
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/DefaultIntervalXYDataset.java<414,417>


-------- Repeated Patch ---------
if(data<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(length<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<start){
throw new IllegalArgumentException("The \'data\' array must have length == 6.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(length<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(data.length!=2){
throw new IllegalArgumentException("The \'data\' array must have length == 2.");
}

1.3320502943378436
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/DefaultXYDataset.java<260,263>


-------- Repeated Patch ---------
if(data<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(length<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<start){
throw new IllegalArgumentException("The \'data\' array must have length == 2.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(length<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(data.length!=3){
throw new IllegalArgumentException("The \'data\' array must have length == 3.");
}

1.3320502943378436
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/DefaultXYZDataset.java<304,307>


-------- Repeated Patch ---------
if(data<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(length<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<start){
throw new IllegalArgumentException("The \'data\' array must have length == 3.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(length<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if((series<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("TaskSeriesCollection.remove(): index outside valid range.");
}
TaskSeries ts=(TaskSeries)this.data.get(series);
ts.removeChangeListener(this);
this.data.remove(series);
fireDatasetChanged(new DatasetChangeInfo());

1.3301221584762768
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/gantt/TaskSeriesCollection.java<299,308>


-------- Repeated Patch ---------
data.removeChangeListener(this);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
data.removeChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if((series<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds.");
}
XYIntervalSeries ts=(XYIntervalSeries)this.data.get(series);
ts.removeChangeListener(this);
this.data.remove(series);
fireDatasetChanged(new DatasetChangeInfo());

1.3301221584762768
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/XYIntervalSeriesCollection.java<304,310>


-------- Repeated Patch ---------
data.removeChangeListener(this);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
data.removeChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if((series<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds.");
}
YIntervalSeries ts=(YIntervalSeries)this.data.get(series);
ts.removeChangeListener(this);
this.data.remove(series);
fireDatasetChanged(new DatasetChangeInfo());

1.3301221584762768
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/YIntervalSeriesCollection.java<279,285>


-------- Repeated Patch ---------
data.removeChangeListener(this);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
data.removeChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if((series<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds.");
}
XIntervalSeries ts=(XIntervalSeries)this.data.get(series);
ts.removeChangeListener(this);
this.data.remove(series);
fireDatasetChanged(new DatasetChangeInfo());

1.3301221584762768
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/XIntervalSeriesCollection.java<281,287>


-------- Repeated Patch ---------
data.removeChangeListener(this);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
data.removeChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if((series<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds.");
}
XYSeries ts=(XYSeries)this.data.get(series);
ts.removeChangeListener(this);
this.data.remove(series);
fireDatasetChanged(new DatasetChangeInfo());

1.3301221584762768
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/XYSeriesCollection.java<164,172>


-------- Repeated Patch ---------
data.removeChangeListener(this);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
data.removeChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
for(int i=0;i<this.renderers.size();i++){
XYItemRenderer renderer2=(XYItemRenderer)this.renderers.get(i);
if(renderer2 instanceof PublicCloneable){
PublicCloneable pc=(PublicCloneable)renderer2;
XYItemRenderer rc=(XYItemRenderer)pc.clone();
clone.renderers.set(i,rc);
rc.setPlot(clone);
rc.addChangeListener(clone);
}
}
clone.foregroundDomainMarkers=(Map)ObjectUtilities.clone(this.foregroundDomainMarkers);

1.328487205000016
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/plot/XYPlot.java<5688,5699>

-------- No Patch ---------


-------- Similar Code ---------
if(data==null){
throw new IllegalArgumentException("Null \'data\' argument.");
}
this.data=new KeyedObjects();
for(int i=0;i<data.getItemCount();i++){
SelectableValue dataItem=new SelectableValue(data.getValue(i));
this.data.addObject(data.getKey(i),dataItem);
}

1.3196740492246972
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/pie/DefaultPieDataset.java<102,109>


-------- Patch ---------
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
if(data==null){
throw new IllegalArgumentException("Null \'data\' argument.");
}
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
XYDataItem existing=(XYDataItem)this.data.get(index);
overwritten=(XYDataItem)existing.clone();
boolean iterate=false;
double oldY=existing.getYValue();
if(!Double.isNaN(oldY)){
iterate=oldY<=this.minY||oldY>=this.maxY;
}

1.31567123457293
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/XYSeries.java<809,816>

-------- No Patch ---------


-------- Similar Code ---------
List result=new java.util.ArrayList();
Iterator iterator=this.data.iterator();
while(iterator.hasNext()){
KeyedObject ko=(KeyedObject)iterator.next();
result.add(ko.getKey());
}
return result;

1.3155194987885404
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/KeyedObjects.java<154,160>

-------- No Patch ---------


-------- Similar Code ---------
if(key==null){
throw new IllegalArgumentException("Null \'key\' argument.");
}
Iterator iterator=this.data.iterator();
while(iterator.hasNext()){
XYSeries series=(XYSeries)iterator.next();
if(key.equals(series.getKey())){
return series;
}
}
throw new UnknownKeyException("Key not found: "+key);

1.3139998638294492
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/XYSeriesCollection.java<277,287>


-------- Repeated Patch ---------
if(key<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<start){
throw new IllegalArgumentException("Null \'key\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(key<start){
throw new IllegalArgumentException("Null \'key\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
{
if(source==null){
throw new IllegalArgumentException("Null \'source\' argument.");
}
double[][] clone=new double[source.length][];
for(int i=0;i<source.length;i++){
if(source[i]!=null){
double[] row=new double[source[i].length];
System.arraycopy(source[i],0,row,0,source[i].length);
clone[i]=row;
}
}
return clone;
}

1.2984678636103193
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/DataUtilities.java<99,112>

-------- No Patch ---------


-------- Similar Code ---------
CategoryTableXYDataset clone=(CategoryTableXYDataset)super.clone();
clone.values=(DefaultKeyedValues2D)this.values.clone();
clone.intervalDelegate=new IntervalXYDelegate(clone);
clone.intervalDelegate.setFixedIntervalWidth(getIntervalWidth());
clone.intervalDelegate.setAutoWidth(isAutoWidth());
clone.intervalDelegate.setIntervalPositionFactor(getIntervalPositionFactor());
return clone;

1.286882612817705
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/CategoryTableXYDataset.java<398,406>


-------- Patch ---------
clone.intervalDelegate=new IntervalXYDelegate(copy);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
clone.intervalDelegate.setFixedIntervalWidth(getIntervalWidth());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
clone.intervalDelegate.setAutoWidth(isAutoWidth());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
clone.intervalDelegate.setIntervalPositionFactor(getIntervalPositionFactor());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
int seriesCount=data.length;
List seriesNameList=new java.util.ArrayList(seriesCount);
for(int i=0;i<seriesCount;i++){
seriesNameList.add("Series "+(i+1));
}
return seriesNameList;

1.2850831505413394
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/DefaultWindDataset.java<282,287>

-------- No Patch ---------


-------- Similar Code ---------
if(item!=null){
result.add(clone(item));
}else {
result.add(null);
}

1.282408892429367
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/util/ObjectUtilities.java<215,220>


-------- Repeated Patch ---------
if(item<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(this.rangeAxis!=null){
clone.rangeAxis=(ValueAxis)this.rangeAxis.clone();
clone.rangeAxis.setPlot(clone);
clone.rangeAxis.addChangeListener(clone);
}

1.2823394775044912
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/plot/FastScatterPlot.java<1079,1083>

-------- No Patch ---------


-------- Similar Code ---------
Series clone=(Series)super.clone();
clone.listeners=new EventListenerList();
clone.propertyChangeSupport=new PropertyChangeSupport(clone);
return clone;

1.281523134514457
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/general/Series.java<243,246>


-------- Patch ---------
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
clone.listeners=new EventListenerList();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(clone.dataset!=null){
clone.dataset.addChangeListener(clone);
}
if(this.renderer!=null){
clone.renderer=(PolarItemRenderer)ObjectUtilities.clone(this.renderer);
}
clone.cornerTextItems=new ArrayList(this.cornerTextItems);
return clone;

1.2790779576547695
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/plot/PolarPlot.java<1069,1080>


-------- Repeated Patch ---------
if(clone<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(dataset<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
if(this.end!=null){
clone.renderer=(PolarItemRenderer)ObjectUtilities.clone(this.renderer);
}
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(dataset<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
{
MultipleXYSeriesLabelGenerator clone=(MultipleXYSeriesLabelGenerator)super.clone();
clone.seriesLabelLists=new HashMap();
Set keys=this.seriesLabelLists.keySet();
Iterator iterator=keys.iterator();
while(iterator.hasNext()){
Object key=iterator.next();
Object entry=this.seriesLabelLists.get(key);
Object toAdd=entry;
if(entry instanceof PublicCloneable){
PublicCloneable pc=(PublicCloneable)entry;
toAdd=pc.clone();
}
clone.seriesLabelLists.put(key,toAdd);
}
return clone;
}

1.2741786837630773
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/labels/MultipleXYSeriesLabelGenerator.java<180,197>

-------- No Patch ---------


-------- Similar Code ---------
if(ebp.getGenerateEntities()){
sec=new StandardEntityCollection();
entityArea=(Shape)area.clone();
}

1.268861887260831
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/block/LabelBlock.java<352,355>

-------- No Patch ---------


-------- Similar Code ---------
CrosshairOverlay clone=(CrosshairOverlay)super.clone();
clone.xCrosshairs=(List)ObjectUtilities.deepClone(this.xCrosshairs);
clone.yCrosshairs=(List)ObjectUtilities.deepClone(this.yCrosshairs);
return clone;

1.2631706260427515
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/panel/CrosshairOverlay.java<589,592>


-------- Patch ---------
clone.xCrosshairs=(List)ObjectUtilities.deepClone(this.xCrosshairs);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
clone.yCrosshairs=(List)ObjectUtilities.deepClone(this.yCrosshairs);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(base.length()<start.length()){
return false;
}

1.257833660375382
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/util/StringUtilities.java<65,67>


-------- Patch ---------
if(base<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<start.length()){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
Rectangle2D target=(Rectangle2D)area.clone();
target=trimMargin(target);
if(this.backgroundPaint!=null){
g2.setPaint(this.backgroundPaint);
g2.fill(target);
}

1.2576484419522198
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/title/PaintScaleLegend.java<537,542>

-------- No Patch ---------


-------- Similar Code ---------
if(!ObjectUtilities.equal(this.data.getKey(),that.getKey())){
return false;
}

1.2550981350318737
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/general/DefaultKeyedValueDataset.java<164,166>

-------- No Patch ---------


-------- Similar Code ---------
if(!ObjectUtilities.equal(this.data.getValue(),that.getValue())){
return false;
}

1.2550981350318737
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/general/DefaultKeyedValueDataset.java<167,169>

-------- No Patch ---------


-------- Similar Code ---------
if(getItemCount()>this.maximumItemCount){
this.data.remove(0);
}

1.2506619775453416
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/ComparableObjectSeries.java<256,258>

-------- No Patch ---------


-------- Similar Code ---------
insets.trim(plotArea);
Rectangle2D originalPlotArea=(Rectangle2D)plotArea.clone();
if(info!=null){
info.setPlotArea(plotArea);
info.setDataArea(plotArea);
}

1.2464832085448085
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/plot/PiePlot3D.java<233,239>


-------- Patch ---------
if(info<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(dataArea.isEmpty()){
return ;
}
createAndAddEntity((Rectangle2D)dataArea.clone(),info,null,null);
if(info!=null){
info.setDataArea(dataArea);
}

1.244289896946541
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/plot/XYPlot.java<3245,3251>


-------- Repeated Patch ---------
if(info<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(params instanceof EntityBlockParams){
ebp=(EntityBlockParams)params;
if(ebp.getGenerateEntities()){
sec=new StandardEntityCollection();
}
}
Rectangle2D contentArea=(Rectangle2D)area.clone();
contentArea=trimMargin(contentArea);

1.2432318661481476
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/block/BlockContainer.java<207,214>

-------- No Patch ---------


-------- Similar Code ---------
if(!ArrayUtilities.equal(this.data,that.data)){
return false;
}

1.2418468584923292
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/plot/FastScatterPlot.java<1023,1025>

-------- No Patch ---------


-------- Similar Code ---------
if(!ObjectUtilities.equal(this.data,that.data)){
return false;
}

1.2418468584923292
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/gantt/TaskSeriesCollection.java<666,668>

-------- No Patch ---------


-------- Similar Code ---------
if(!ObjectUtilities.equal(this.data,that.data)){
return false;
}

1.2418468584923292
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/XYSeries.java<972,974>

-------- No Patch ---------


-------- Similar Code ---------
if(!Arrays.equals(this.data,that.data)){
return false;
}

1.2418468584923292
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/DefaultOHLCDataset.java<319,321>

-------- No Patch ---------


-------- Similar Code ---------
if(!ObjectUtilities.equal(this.data,that.data)){
return false;
}

1.2418468584923292
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/DefaultTableXYDataset.java<515,517>

-------- No Patch ---------


-------- Similar Code ---------
if(!ObjectUtilities.equal(this.data,that.data)){
return false;
}

1.2418468584923292
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/ComparableObjectSeries.java<417,419>

-------- No Patch ---------


-------- Similar Code ---------
if(!ObjectUtilities.equal(this.data,that.data)){
return false;
}

1.2418468584923292
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/TimeSeriesCollection.java<755,757>

-------- No Patch ---------


-------- Similar Code ---------
if(!ObjectUtilities.equal(this.data,that.data)){
return false;
}

1.2418468584923292
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/TimePeriodValuesCollection.java<445,447>

-------- No Patch ---------


-------- Similar Code ---------
if(!ObjectUtilities.equal(this.data,that.data)){
return false;
}

1.2418468584923292
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/TimeSeries.java<1165,1167>

-------- No Patch ---------


-------- Similar Code ---------
if(isAutoTickUnitSelection()){
selectAutoTickUnit(g2,dataArea,edge);
}
int minorTickCount=this.tickUnit.getMinorTickCount();
double start=Math.floor(calculateLog(getLowerBound()));
double end=Math.ceil(calculateLog(getUpperBound()));
double current=start;

1.2405121379221742
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/axis/LogAxis.java<517,523>

-------- No Patch ---------


-------- Similar Code ---------
if(isAutoTickUnitSelection()){
selectAutoTickUnit(g2,dataArea,edge);
}
int minorTickCount=this.tickUnit.getMinorTickCount();
double start=Math.floor(calculateLog(getLowerBound()));
double end=Math.ceil(calculateLog(getUpperBound()));
double current=start;

1.2405121379221742
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/axis/LogAxis.java<569,575>

-------- No Patch ---------


-------- Similar Code ---------
if(this.data.isEmpty()){
this.timePeriodClass=null;
}

1.2391549606490098
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/TimeSeries.java<1007,1009>

-------- No Patch ---------


-------- Similar Code ---------
if(axis!=null){
ValueAxis clonedAxis=(ValueAxis)axis.clone();
clone.domainAxes.set(i,clonedAxis);
clonedAxis.setPlot(clone);
clonedAxis.addChangeListener(clone);
}

1.2330452191456276
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/plot/XYPlot.java<5650,5655>


-------- Patch ---------
if(axis<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(axis!=null){
ValueAxis clonedAxis=(ValueAxis)axis.clone();
clone.rangeAxes.set(i,clonedAxis);
clonedAxis.setPlot(clone);
clonedAxis.addChangeListener(clone);
}

1.2330452191456276
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/plot/XYPlot.java<5663,5668>


-------- Repeated Patch ---------
if(axis<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(!this.data.equals(that.data)){
return false;
}

1.2320503676062504
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java<714,716>

-------- No Patch ---------


-------- Similar Code ---------
clone.backgroundDomainMarkers=cloneMarkerMap(this.backgroundDomainMarkers);
clone.foregroundRangeMarkers=cloneMarkerMap(this.foregroundRangeMarkers);
clone.backgroundRangeMarkers=cloneMarkerMap(this.backgroundRangeMarkers);
if(this.fixedLegendItems!=null){
clone.fixedLegendItems=(LegendItemCollection)this.fixedLegendItems.clone();
}
return clone;

1.2318778361594407
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/plot/CategoryPlot.java<5157,5167>


-------- Patch ---------
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
clone.backgroundDomainMarkers=cloneMarkerMap(this.backgroundDomainMarkers);
copy.data=new java.util.ArrayList();


-------- Patch ---------
clone.backgroundRangeMarkers=cloneMarkerMap(this.backgroundRangeMarkers);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(this.data!=null){
result=this.data.getKey();
}

1.227227369238294
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/general/DefaultKeyedValueDataset.java<99,101>

-------- No Patch ---------


-------- Similar Code ---------
if(this.data!=null){
result=this.data.getValue();
}

1.227227369238294
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/general/DefaultKeyedValueDataset.java<112,114>

-------- No Patch ---------


-------- Similar Code ---------
if(startIndex==this.data.size()){
emptyRange=true;
}

1.227227369238294
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/TimeSeries.java<1105,1107>


-------- Patch ---------
if(startIndex<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
CategoryAxis clone=(CategoryAxis)super.clone();
clone.tickLabelFontMap=new HashMap(this.tickLabelFontMap);
clone.tickLabelPaintMap=new HashMap(this.tickLabelPaintMap);
clone.categoryLabelToolTips=new HashMap(this.categoryLabelToolTips);
return clone;

1.2234217602855062
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/axis/CategoryAxis.java<1291,1295>


-------- Patch ---------
clone.tickLabelFontMap=new HashMap(this.tickLabelFontMap);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
clone.tickLabelPaintMap=new HashMap(this.tickLabelPaintMap);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
clone.categoryLabelToolTips=new HashMap(this.categoryLabelToolTips);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(getItemCount()>this.maximumItemCount){
XYDataItem removed=(XYDataItem)this.data.remove(0);
updateBoundsForRemovedItem(removed);
}

1.2183640522700836
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/XYSeries.java<545,548>

-------- No Patch ---------


-------- Similar Code ---------
if(getItemCount()>this.maximumItemCount){
XYDataItem removed=(XYDataItem)this.data.remove(0);
updateBoundsForRemovedItem(removed);
}

1.2183640522700836
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/XYSeries.java<843,846>

-------- No Patch ---------


-------- Similar Code ---------
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}

1.2183640522700836
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/TimeSeries.java<629,632>

-------- No Patch ---------


-------- Similar Code ---------
if(getItemCount()>this.maximumItemCount){
TimeSeriesDataItem d=(TimeSeriesDataItem)this.data.remove(0);
updateBoundsForRemovedItem(d);
}

1.2183640522700836
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/TimeSeries.java<853,856>

-------- No Patch ---------


-------- Similar Code ---------
if(pos>=0){
this.data.remove(pos);
}

1.2183570282513736
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/KeyedObjects.java<236,238>


-------- Patch ---------
if(pos<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(this.data==null){
throw new RuntimeException("updateValue: can\'t update null.");
}
setValue(this.data.getKey(),value);

1.2144575777837912
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/general/DefaultKeyedValueDataset.java<124,127>


-------- Patch ---------
if(end<start){
throw new RuntimeException("updateValue: can\'t update null.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(this.data.size()>0){
this.data.clear();
fireSeriesChanged();
}

1.2140381792613126
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/ComparableObjectSeries.java<356,359>

-------- No Patch ---------


-------- Similar Code ---------
if(renderer2 instanceof PublicCloneable){
PublicCloneable pc=(PublicCloneable)renderer2;
CategoryItemRenderer rc=(CategoryItemRenderer)pc.clone();
clone.renderers.set(i,rc);
rc.setPlot(clone);
rc.addChangeListener(clone);
}

1.2107829810262656
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/plot/CategoryPlot.java<5137,5143>

-------- No Patch ---------


-------- Similar Code ---------
XYSeries series=sampleFunction2DToSeries(f,start,end,samples,seriesKey);
XYSeriesCollection collection=new XYSeriesCollection(series);
return collection;

1.2055795781152694
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/general/DatasetUtilities.java<510,513>

-------- No Patch ---------


-------- Similar Code ---------
this.displayStart=mapValueToFixedRange(start);
this.displayEnd=mapValueToFixedRange(end);
if(this.displayStart<this.displayEnd){
setRange(this.displayStart,this.displayEnd);
}else {
setRange(this.displayStart,this.fixedRange.getUpperBound()+(this.displayEnd-this.fixedRange.getLowerBound()));
}
notifyListeners(new AxisChangeEvent(this));

1.204381740801228
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/axis/ModuloAxis.java<113,122>

-------- No Patch ---------


-------- Similar Code ---------
if(this.data.size()==0){
this.xPoints.clear();
}else if(this.autoPrune){
prune();
}

1.2009229163591446
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/DefaultTableXYDataset.java<412,417>

-------- No Patch ---------


-------- Similar Code ---------
if(this.data.isEmpty()){
return ;
}

1.2006407690254357
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/TimeSeries.java<905,907>

-------- No Patch ---------


-------- Similar Code ---------
IntervalMarker im=(IntervalMarker)marker;
double start=im.getStartValue();
double end=im.getEndValue();
Range range=axis.getRange();
if(!(range.intersects(start,end))){
return ;
}

1.2004643010489893
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java<1232,1238>


-------- Patch ---------
if(!(data.intersects(copy,end))){
return ;
}
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
IntervalMarker im=(IntervalMarker)marker;
double start=im.getStartValue();
double end=im.getEndValue();
Range range=domainAxis.getRange();
if(!(range.intersects(start,end))){
return ;
}

1.2004643010489893
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java<1356,1362>


-------- Repeated Patch ---------
if(!(data.intersects(copy,end))){
return ;
}
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
IntervalMarker im=(IntervalMarker)marker;
double start=im.getStartValue();
double end=im.getEndValue();
Range range=rangeAxis.getRange();
if(!(range.intersects(start,end))){
return ;
}

1.2004643010489893
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java<1555,1561>


-------- Repeated Patch ---------
if(!(data.intersects(copy,end))){
return ;
}
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
SelectableValue item=(SelectableValue)this.data.getObject(key);
return item.isSelected();

1.1934563530497264
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/pie/DefaultPieDataset.java<396,397>

-------- No Patch ---------


-------- Similar Code ---------
TaskSeries ts=(TaskSeries)this.data.get(series);
return ts.getKey();

1.1934563530497264
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/gantt/TaskSeriesCollection.java<147,148>

-------- No Patch ---------


-------- Similar Code ---------
TaskSeries series=(TaskSeries)this.data.get(index);
return series.getKey();

1.1934563530497264
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/gantt/TaskSeriesCollection.java<240,241>

-------- No Patch ---------


-------- Similar Code ---------
VectorDataItem result=(VectorDataItem)this.data.remove(index);
fireSeriesChanged();
return result;

1.1934563530497264
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/VectorSeries.java<106,108>


-------- Repeated Patch ---------
fireSeriesChanged();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
ComparableObjectItem result=(ComparableObjectItem)this.data.remove(index);
fireSeriesChanged();
return result;

1.1934563530497264
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/ComparableObjectSeries.java<371,374>


-------- Repeated Patch ---------
fireSeriesChanged();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
FontMetrics fm=this.g2.getFontMetrics();
Rectangle2D bounds=TextUtilities.getTextBounds(text.substring(start,end),this.g2,fm);
float result=(float)bounds.getWidth();
return result;

1.1879169163898708
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/text/G2TextMeasurer.java<75,79>

-------- No Patch ---------


-------- Similar Code ---------
if(this.data.size()>0){
this.data.clear();
this.timePeriodClass=null;
this.minY=Double.NaN;
this.maxY=Double.NaN;
fireSeriesChanged();
}

1.175463591797163
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/TimeSeries.java<950,956>

-------- No Patch ---------


-------- Similar Code ---------
if(this.currentText!=null){
this.currentText.append(String.copyValueOf(ch,start,length));
}

1.1745754887079558
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xml/ValueHandler.java<140,142>

-------- No Patch ---------


-------- Similar Code ---------
if(this.currentText!=null){
this.currentText.append(String.copyValueOf(ch,start,length));
}

1.1745754887079558
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xml/KeyHandler.java<135,137>

-------- No Patch ---------


-------- Similar Code ---------
RegularTimePeriod start=series.getTimePeriod(0);
RegularTimePeriod end=series.getTimePeriod(count-1);
Range temp;
if(!includeInterval){
temp=new Range(getX(start),getX(end));
}else {
temp=new Range(start.getFirstMillisecond(this.workingCalendar),end.getLastMillisecond(this.workingCalendar));
}

1.172006655913204
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/TimeSeriesCollection.java<658,668>

-------- No Patch ---------


-------- Similar Code ---------
RegularTimePeriod start=series.getTimePeriod(0);
RegularTimePeriod end=series.getTimePeriod(count-1);
Range temp;
if(!includeInterval){
temp=new Range(getX(start),getX(end));
}else {
temp=new Range(start.getFirstMillisecond(this.workingCalendar),end.getLastMillisecond(this.workingCalendar));
}

1.172006655913204
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/TimeSeriesCollection.java<694,704>

-------- No Patch ---------


-------- Similar Code ---------
if(getItemCount()>item){
SelectableValue dataItem=(SelectableValue)this.data.getObject(item);
result=dataItem.getValue();
}

1.1707253433941511
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/pie/DefaultPieDataset.java<170,173>


-------- Patch ---------
if(end<item){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
XYDataItem removed=(XYDataItem)this.data.remove(index);
updateBoundsForRemovedItem(removed);
fireSeriesChanged();
return removed;

1.1695531556535639
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/XYSeries.java<576,579>


-------- Patch ---------
updateBoundsForRemovedItem(data);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireSeriesChanged();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
YIntervalSeries s=(YIntervalSeries)this.data.get(series);
return new Double(s.getYValue(item));

1.1695531556535639
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/YIntervalSeriesCollection.java<214,215>

-------- No Patch ---------


-------- Similar Code ---------
YIntervalSeries s=(YIntervalSeries)this.data.get(series);
return new Double(s.getYLowValue(item));

1.1695531556535639
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/YIntervalSeriesCollection.java<253,254>

-------- No Patch ---------


-------- Similar Code ---------
YIntervalSeries s=(YIntervalSeries)this.data.get(series);
return new Double(s.getYHighValue(item));

1.1695531556535639
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/YIntervalSeriesCollection.java<266,267>

-------- No Patch ---------


-------- Similar Code ---------
if(!this.allowDuplicateXValues){
int index=indexOf(item.getX());
if(index>=0){
throw new SeriesException("X-value already exists.");
}
}
this.data.add(item);

1.1683640522700838
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/XYSeries.java<534,542>


-------- Patch ---------
if(index<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<start){
throw new SeriesException("X-value already exists.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(!this.allowDuplicateXValues){
int index=indexOf(item.getComparable());
if(index>=0){
throw new SeriesException("X-value already exists.");
}
}
this.data.add(item);

1.1683640522700838
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/ComparableObjectSeries.java<246,254>


-------- Repeated Patch ---------
if(index<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<start){
throw new SeriesException("X-value already exists.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(index<start){
throw new SeriesException("X-value already exists.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
CombinedDomainCategoryPlot result=(CombinedDomainCategoryPlot)super.clone();
result.subplots=(List)ObjectUtilities.deepClone(this.subplots);
for(Iterator it=result.subplots.iterator();it.hasNext();){
Plot child=(Plot)it.next();
child.setParent(result);
}
return result;

1.1623270323417216
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/plot/CombinedDomainCategoryPlot.java<663,670>


-------- Patch ---------
result.subplots=(List)ObjectUtilities.deepClone(this.subplots);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
TaskSeries s=this.underlying.getSeries(series);
Task t=s.get(item);
TimePeriod duration=t.getDuration();
Date start=duration.getStart();
Date end=duration.getEnd();
return (start.getTime()+end.getTime())/2.0;

1.1621917707016656
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/gantt/XYTaskDataset.java<389,394>

-------- No Patch ---------


-------- Similar Code ---------
if(index>=0){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.remove(index);
updateBoundsForRemovedItem(item);
if(this.data.isEmpty()){
this.timePeriodClass=null;
}
fireSeriesChanged();
}

1.1617885284827532
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/TimeSeries.java<969,977>


-------- Repeated Patch ---------
if(index<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
HashSet hs=(HashSet)this.xPoints.clone();
Iterator iterator=hs.iterator();
while(iterator.hasNext()){
Number x=(Number)iterator.next();
if(canPrune(x)){
removeAllValuesForX(x);
}
}

1.1616733449423864
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/DefaultTableXYDataset.java<466,473>

-------- No Patch ---------


-------- Similar Code ---------
this.workingCalendar=Calendar.getInstance(zone);
this.data=new ArrayList();
if(series!=null){
this.data.add(series);
series.addChangeListener(this);
}

1.1603679668049307
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/TimeSeriesCollection.java<184,189>


-------- Repeated Patch ---------
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
this.copy=new ArrayList();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(this.plot==null){
return ;
}
WaferMapDataset data=this.plot.getDataset();
Number dataMin=data.getMinValue();
Number dataMax=data.getMaxValue();

1.1579603835566827
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/renderer/WaferMapRenderer.java<208,213>


-------- Patch ---------
if(end<start){
if(this.start==null){
return ;
}
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
SelectableValue sv=(SelectableValue)this.data.getObject(row,column);
return sv.isSelected();

1.15775077614972
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/category/DefaultCategoryDataset.java<465,466>

-------- No Patch ---------


-------- Similar Code ---------
XYIntervalSeries s=(XYIntervalSeries)this.data.get(series);
return s.getX(item);

1.15775077614972
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/XYIntervalSeriesCollection.java<159,160>

-------- No Patch ---------


-------- Similar Code ---------
XYIntervalSeries s=(XYIntervalSeries)this.data.get(series);
return s.getXLowValue(item);

1.15775077614972
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/XYIntervalSeriesCollection.java<173,174>

-------- No Patch ---------


-------- Similar Code ---------
XYIntervalSeries s=(XYIntervalSeries)this.data.get(series);
return s.getXHighValue(item);

1.15775077614972
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/XYIntervalSeriesCollection.java<187,188>

-------- No Patch ---------


-------- Similar Code ---------
XYIntervalSeries s=(XYIntervalSeries)this.data.get(series);
return s.getYValue(item);

1.15775077614972
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/XYIntervalSeriesCollection.java<201,202>

-------- No Patch ---------


-------- Similar Code ---------
XYIntervalSeries s=(XYIntervalSeries)this.data.get(series);
return s.getYLowValue(item);

1.15775077614972
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/XYIntervalSeriesCollection.java<215,216>

-------- No Patch ---------


-------- Similar Code ---------
XYIntervalSeries s=(XYIntervalSeries)this.data.get(series);
return s.getYHighValue(item);

1.15775077614972
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/XYIntervalSeriesCollection.java<229,230>

-------- No Patch ---------


-------- Similar Code ---------
YIntervalSeries s=(YIntervalSeries)this.data.get(series);
return s.getX(item);

1.15775077614972
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/YIntervalSeriesCollection.java<159,160>

-------- No Patch ---------


-------- Similar Code ---------
YIntervalSeries s=(YIntervalSeries)this.data.get(series);
return s.getYValue(item);

1.15775077614972
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/YIntervalSeriesCollection.java<173,174>

-------- No Patch ---------


-------- Similar Code ---------
YIntervalSeries s=(YIntervalSeries)this.data.get(series);
return s.getYLowValue(item);

1.15775077614972
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/YIntervalSeriesCollection.java<187,188>

-------- No Patch ---------


-------- Similar Code ---------
YIntervalSeries s=(YIntervalSeries)this.data.get(series);
return s.getYHighValue(item);

1.15775077614972
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/YIntervalSeriesCollection.java<201,202>

-------- No Patch ---------


-------- Similar Code ---------
XIntervalSeries s=(XIntervalSeries)this.data.get(series);
return s.getXLowValue(item);

1.15775077614972
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/XIntervalSeriesCollection.java<172,173>

-------- No Patch ---------


-------- Similar Code ---------
XIntervalSeries s=(XIntervalSeries)this.data.get(series);
return s.getXHighValue(item);

1.15775077614972
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/XIntervalSeriesCollection.java<186,187>

-------- No Patch ---------


-------- Similar Code ---------
XIntervalSeries s=(XIntervalSeries)this.data.get(series);
return s.getYValue(item);

1.15775077614972
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/XIntervalSeriesCollection.java<200,201>

-------- No Patch ---------


-------- Similar Code ---------
XYSeries s=(XYSeries)this.data.get(series);
return s.getX(item);

1.15775077614972
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/XYSeriesCollection.java<330,331>

-------- No Patch ---------


-------- Similar Code ---------
XYSeries s=(XYSeries)this.data.get(series);
return s.getY(index);

1.15775077614972
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/XYSeriesCollection.java<367,368>

-------- No Patch ---------


-------- Similar Code ---------
XYSeries s=(XYSeries)this.data.get(series);
return s.getX(item);

1.15775077614972
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/DefaultTableXYDataset.java<283,284>

-------- No Patch ---------


-------- Similar Code ---------
XYSeries s=(XYSeries)this.data.get(series);
return s.getY(index);

1.15775077614972
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/DefaultTableXYDataset.java<321,322>

-------- No Patch ---------


-------- Similar Code ---------
TimeSeries ts=(TimeSeries)this.data.get(series);
return ts.getValue(item);

1.15775077614972
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/TimeSeriesCollection.java<476,477>

-------- No Patch ---------


-------- Similar Code ---------
long start=period.getStart().getTime();
long end=period.getEnd().getTime();
long middle=start+((end-start)/2);
if(this.minStartIndex>=0){
long minStart=getDataItem(this.minStartIndex).getPeriod().getStart().getTime();
if(start<minStart){
this.minStartIndex=index;
}
}else {
this.minStartIndex=index;
}

1.154100302135622
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/TimePeriodValues.java<259,272>


-------- Patch ---------
if(end<minStart){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
SelectableValue sv=(SelectableValue)this.data.getObject(row,column);
if(sv==null){
return null;
}else {
return sv.getValue();
}

1.1511127086814603
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/category/DefaultCategoryDataset.java<120,127>


-------- Patch ---------
if(sv<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<start){
if(start==null){
return null;
}else {
return sv.getValue();
}
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<start){
if(start==null){
return null;
}else {
return sv.getValue();
}
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
SelectableValue sv=(SelectableValue)this.data.getObject(rowKey,columnKey);
if(sv!=null){
return sv.getValue();
}else {
return null;
}

1.1511127086814603
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/category/DefaultCategoryDataset.java<221,228>


-------- Repeated Patch ---------
if(sv<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<start){
if(start!=null){
return sv.getValue();
}else {
return null;
}
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<start){
if(start!=null){
return sv.getValue();
}else {
return null;
}
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(sv<start){
if(start!=null){
return sv.getValue();
}else {
return null;
}
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
state.setDataArea(dataArea);
createAndAddEntity((Rectangle2D)dataArea.clone(),state,null,null);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

1.1490755590960338
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/plot/CategoryPlot.java<3616,3626>

-------- No Patch ---------


-------- Similar Code ---------
List values=(List)this.data.getObject(row,column);
if(values!=null){
return Collections.unmodifiableList(values);
}else {
return Collections.EMPTY_LIST;
}

1.1481898011811238
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/statistics/DefaultMultiValueCategoryDataset.java<172,178>


-------- Patch ---------
if(values<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<start){
if(start!=null){
return Collections.unmodifiableList(values);
}else {
return Collections.EMPTY_LIST;
}
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<start){
if(start!=null){
return Collections.unmodifiableList(values);
}else {
return Collections.EMPTY_LIST;
}
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
TimeSeries ts=(TimeSeries)this.data.get(series);
return new Long(ts.getTimePeriod(item).getFirstMillisecond(this.workingCalendar));

1.145797620961355
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/TimeSeriesCollection.java<448,450>

-------- No Patch ---------


-------- Similar Code ---------
TimeSeries ts=(TimeSeries)this.data.get(series);
return new Long(ts.getTimePeriod(item).getLastMillisecond(this.workingCalendar));

1.145797620961355
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/TimeSeriesCollection.java<462,464>

-------- No Patch ---------


-------- Similar Code ---------
if(fieldIndex>0){
String key=line.substring(start,i);
keys.add(removeStringDelimiters(key));
}

1.145426714341239
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/io/CSV.java<128,132>


-------- Patch ---------
if(fieldIndex<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(index>=0){
return (TimeSeriesDataItem)this.data.get(index);
}else {
return null;
}

1.1450521345616052
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/TimeSeries.java<447,452>


-------- Repeated Patch ---------
if(index<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<start){
if(start>=0){
return (TimeSeriesDataItem)this.data.get(index);
}else {
return null;
}
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<start){
if(start>=0){
return (TimeSeriesDataItem)this.data.get(index);
}else {
return null;
}
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(index<start){
if(start>=0){
return (TimeSeriesDataItem)this.data.get(index);
}else {
return null;
}
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
SelectableValue item=(SelectableValue)this.data.getObject(key);
item.setSelected(selected);
if(notify){
fireSelectionEvent();
}

1.1443843292997713
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/pie/DefaultPieDataset.java<405,409>

-------- No Patch ---------


-------- Similar Code ---------
IntervalCategoryDataset icd=(IntervalCategoryDataset)dataset;
Number start=icd.getStartValue(row,column);
Number end=icd.getEndValue(row,column);
if(getNumberFormat()!=null){
result[3]=getNumberFormat().format(start);
result[4]=getNumberFormat().format(end);
}else if(getDateFormat()!=null){
result[3]=getDateFormat().format(start);
result[4]=getDateFormat().format(end);
}

1.142979495485089
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/labels/IntervalCategoryItemLabelGenerator.java<123,133>

-------- No Patch ---------


-------- Similar Code ---------
IntervalCategoryDataset icd=(IntervalCategoryDataset)dataset;
Number start=icd.getStartValue(row,column);
Number end=icd.getEndValue(row,column);
if(getNumberFormat()!=null){
result[3]=getNumberFormat().format(start);
result[4]=getNumberFormat().format(end);
}else if(getDateFormat()!=null){
result[3]=getDateFormat().format(start);
result[4]=getDateFormat().format(end);
}

1.142979495485089
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/labels/IntervalCategoryToolTipGenerator.java<120,130>

-------- No Patch ---------


-------- Similar Code ---------
this.maximumItemCount=maximum;
int remove=this.data.size()-maximum;
if(remove>0){
this.data.subList(0,remove).clear();
findBoundsByIteration();
fireSeriesChanged();
}

1.142179708042196
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/XYSeries.java<384,390>


-------- Patch ---------
if(remove<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(this.data.contains(series)){
series.removeChangeListener(this);
this.data.remove(series);
fireDatasetChanged(new DatasetChangeInfo());
}

1.1415417073505156
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/gantt/TaskSeriesCollection.java<283,288>

-------- No Patch ---------


-------- Similar Code ---------
if(this.data.contains(series)){
series.removeChangeListener(this);
this.data.remove(series);
fireDatasetChanged(new DatasetChangeInfo());
}

1.1415417073505156
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/XYIntervalSeriesCollection.java<326,331>

-------- No Patch ---------


-------- Similar Code ---------
if(this.data.contains(series)){
series.removeChangeListener(this);
this.data.remove(series);
fireDatasetChanged(new DatasetChangeInfo());
}

1.1415417073505156
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/YIntervalSeriesCollection.java<301,306>

-------- No Patch ---------


-------- Similar Code ---------
if(this.data.contains(series)){
series.removeChangeListener(this);
this.data.remove(series);
fireDatasetChanged(new DatasetChangeInfo());
}

1.1415417073505156
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/XIntervalSeriesCollection.java<303,308>

-------- No Patch ---------


-------- Similar Code ---------
if(this.data.contains(series)){
series.removeChangeListener(this);
this.data.remove(series);
fireDatasetChanged(new DatasetChangeInfo());
}

1.1415417073505156
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/XYSeriesCollection.java<186,191>

-------- No Patch ---------


-------- Similar Code ---------
if(base.length()<end.length()){
return false;
}
return base.regionMatches(true,base.length()-end.length(),end,0,end.length());

1.1378189912325432
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/util/StringUtilities.java<81,85>


-------- Repeated Patch ---------
if(base<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<end.length()){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(orientation==PlotOrientation.VERTICAL){
left.moveTo(transX1,transStack1);
left.lineTo(transX1,transY1);
left.lineTo(transXLeft,transStackLeft);
}else {
left.moveTo(transStack1,transX1);
left.lineTo(transY1,transX1);
left.lineTo(transStackLeft,transXLeft);
}
left.clone();

1.1339425545811395
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/renderer/xy/StackedXYAreaRenderer2.java<367,377>


-------- Patch ---------
if(orientation<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<VERTICAL){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(this.xPosition==TimePeriodAnchor.END){
TimePeriod minEnd=series.getTimePeriod(series.getMinEndIndex());
temp=new Range(minEnd.getEnd().getTime(),end.getEnd().getTime());
}

1.13312117012717
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/TimePeriodValuesCollection.java<410,415>


-------- Patch ---------
if(end<END){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(position<=this.data.size()){
this.data.add(position,item);
}else {
this.data.add(item);
}

1.1327511470021132
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/KeyedObjects.java<240,245>


-------- Repeated Patch ---------
if(end<=start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(position<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(position<=start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(index<this.data.size()){
this.data.add(index,item);
}else {
this.data.add(item);
}

1.1327511470021132
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/XYSeries.java<521,526>


-------- Repeated Patch ---------
if(index<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(index<this.data.size()){
this.data.add(index,item);
}else {
this.data.add(item);
}

1.1327511470021132
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/ComparableObjectSeries.java<233,238>


-------- Repeated Patch ---------
if(index<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(handler!=this){
handler.characters(ch,start,length);
}

1.1300635212254257
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xml/RootHandler.java<84,86>


-------- Patch ---------
if(handler<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(firstWord){
while(measurer.getStringWidth(text,start,end)>width){
end--;
if(end<=start){
return end;
}
}
return end;
}else {
end=iterator.previous();
return end;
}

1.129072608106036
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/text/TextUtilities.java<252,264>


-------- Repeated Patch ---------
if(end<=start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<start){
if(end<=end){
return end;
}
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
XIntervalSeries s=(XIntervalSeries)this.data.get(series);
XIntervalDataItem di=(XIntervalDataItem)s.getDataItem(item);
return new Double(di.getYValue());

1.127918015400714
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/XIntervalSeriesCollection.java<213,215>

-------- No Patch ---------


-------- Similar Code ---------
XIntervalSeries s=(XIntervalSeries)this.data.get(series);
XIntervalDataItem di=(XIntervalDataItem)s.getDataItem(item);
return new Double(di.getXLowValue());

1.127918015400714
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/XIntervalSeriesCollection.java<227,229>

-------- No Patch ---------


-------- Similar Code ---------
XIntervalSeries s=(XIntervalSeries)this.data.get(series);
XIntervalDataItem di=(XIntervalDataItem)s.getDataItem(item);
return new Double(di.getXHighValue());

1.127918015400714
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/XIntervalSeriesCollection.java<241,243>

-------- No Patch ---------


-------- Similar Code ---------
TimeSeries ts=(TimeSeries)this.data.get(series);
RegularTimePeriod period=ts.getTimePeriod(item);
return new Long(getX(period));

1.127918015400714
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/TimeSeriesCollection.java<413,415>

-------- No Patch ---------


-------- Similar Code ---------
OHLCSeries s=(OHLCSeries)this.data.get(series);
OHLCItem di=(OHLCItem)s.getDataItem(item);
return new Double(di.getYValue());

1.127918015400714
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/ohlc/OHLCSeriesCollection.java<242,244>

-------- No Patch ---------


-------- Similar Code ---------
if(fillBand){
getRenderer().fillDomainGridBand(g2,this,xAxis,dataArea,previous,end);
}

1.1252891980686575
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/plot/XYPlot.java<3661,3664>

-------- No Patch ---------


-------- Similar Code ---------
if(fillBand){
getRenderer().fillRangeGridBand(g2,this,axis,dataArea,previous,end);
}

1.1252891980686575
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/plot/XYPlot.java<3696,3699>

-------- No Patch ---------


-------- Similar Code ---------
if(obj instanceof DefaultBoxAndWhiskerCategoryDataset){
DefaultBoxAndWhiskerCategoryDataset dataset=(DefaultBoxAndWhiskerCategoryDataset)obj;
return ObjectUtilities.equal(this.data,dataset.data);
}

1.1240292561621188
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java<900,904>

-------- No Patch ---------


-------- Similar Code ---------
if(this.data.contains(series)){
series.removeChangeListener(this);
this.data.remove(series);
if(this.data.size()==0){
this.xPoints.clear();
}
fireDatasetChanged(new DatasetChangeInfo());
}

1.1239296213501735
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/DefaultTableXYDataset.java<383,391>

-------- No Patch ---------


-------- Similar Code ---------
Object result=null;
KeyedObject kobj=(KeyedObject)this.data.get(item);
if(kobj!=null){
result=kobj.getObject();
}
return result;

1.1218005325485052
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/KeyedObjects.java<95,100>


-------- Patch ---------
if(kobj<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
Comparable result=null;
KeyedObject item=(KeyedObject)this.data.get(index);
if(item!=null){
result=item.getKey();
}
return result;

1.1218005325485052
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/KeyedObjects.java<115,120>


-------- Repeated Patch ---------
if(item<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(this.data.size()>0){
this.data.clear();
this.minX=Double.NaN;
this.maxX=Double.NaN;
this.minY=Double.NaN;
this.maxY=Double.NaN;
fireSeriesChanged();
}

1.1201150588984627
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/XYSeries.java<601,608>

-------- No Patch ---------


-------- Similar Code ---------
SelectableValue sv=(SelectableValue)this.data.getObject(row,column);
sv.setSelected(selected);
if(notify){
fireSelectionEvent();
}

1.119929130074619
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/category/DefaultCategoryDataset.java<475,479>

-------- No Patch ---------


-------- Similar Code ---------
VectorSeries s=(VectorSeries)this.data.get(series);
VectorDataItem di=(VectorDataItem)s.getDataItem(item);
return di.getXValue();

1.119929130074619
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/VectorSeriesCollection.java<213,215>

-------- No Patch ---------


-------- Similar Code ---------
VectorSeries s=(VectorSeries)this.data.get(series);
VectorDataItem di=(VectorDataItem)s.getDataItem(item);
return di.getYValue();

1.119929130074619
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/VectorSeriesCollection.java<241,243>

-------- No Patch ---------


-------- Similar Code ---------
VectorSeries s=(VectorSeries)this.data.get(series);
VectorDataItem di=(VectorDataItem)s.getDataItem(item);
return di.getVector();

1.119929130074619
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/VectorSeriesCollection.java<269,271>

-------- No Patch ---------


-------- Similar Code ---------
VectorSeries s=(VectorSeries)this.data.get(series);
VectorDataItem di=(VectorDataItem)s.getDataItem(item);
return di.getVectorX();

1.119929130074619
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/VectorSeriesCollection.java<283,285>

-------- No Patch ---------


-------- Similar Code ---------
VectorSeries s=(VectorSeries)this.data.get(series);
VectorDataItem di=(VectorDataItem)s.getDataItem(item);
return di.getVectorY();

1.119929130074619
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/VectorSeriesCollection.java<297,299>

-------- No Patch ---------


-------- Similar Code ---------
XIntervalSeries s=(XIntervalSeries)this.data.get(series);
XIntervalDataItem di=(XIntervalDataItem)s.getDataItem(item);
return di.getX();

1.119929130074619
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/XIntervalSeriesCollection.java<157,159>

-------- No Patch ---------


-------- Similar Code ---------
TimeSeries s=(TimeSeries)this.data.get(series);
RegularTimePeriod period=s.getTimePeriod(item);
return getX(period);

1.119929130074619
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/TimeSeriesCollection.java<399,401>

-------- No Patch ---------


-------- Similar Code ---------
TimePeriodValues ts=(TimePeriodValues)this.data.get(series);
TimePeriodValue dp=ts.getDataItem(item);
return dp.getValue();

1.119929130074619
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/TimePeriodValuesCollection.java<309,311>

-------- No Patch ---------


-------- Similar Code ---------
OHLCSeries s=(OHLCSeries)this.data.get(series);
OHLCItem di=(OHLCItem)s.getDataItem(item);
return di.getOpenValue();

1.119929130074619
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/ohlc/OHLCSeriesCollection.java<256,258>

-------- No Patch ---------


-------- Similar Code ---------
OHLCSeries s=(OHLCSeries)this.data.get(series);
OHLCItem di=(OHLCItem)s.getDataItem(item);
return di.getCloseValue();

1.119929130074619
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/ohlc/OHLCSeriesCollection.java<282,284>

-------- No Patch ---------


-------- Similar Code ---------
OHLCSeries s=(OHLCSeries)this.data.get(series);
OHLCItem di=(OHLCItem)s.getDataItem(item);
return di.getHighValue();

1.119929130074619
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/ohlc/OHLCSeriesCollection.java<308,310>

-------- No Patch ---------


-------- Similar Code ---------
OHLCSeries s=(OHLCSeries)this.data.get(series);
OHLCItem di=(OHLCItem)s.getDataItem(item);
return di.getLowValue();

1.119929130074619
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/ohlc/OHLCSeriesCollection.java<334,336>

-------- No Patch ---------


-------- Similar Code ---------
if(end>newline){
return newline;
}

1.1177645800521294
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/text/TextUtilities.java<267,269>


-------- Patch ---------
if(end<newline){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<start){
if(end>start){
return newline;
}
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
State state=(State)super.initialise(g2,dataArea,plot,data,info);
state.setProcessVisibleItemsOnly(false);
this.points=new Vector();
setDrawSeriesLineAsPath(true);
return state;

1.1162977988816931
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/renderer/xy/XYSplineRenderer.java<151,155>


-------- Patch ---------
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.setProcessVisibleItemsOnly(false);
copy.data=new java.util.ArrayList();


-------- Patch ---------
setDrawSeriesLineAsPath(true);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(this.data.size()==0){
return ;
}
for(int i=0;i<this.data.size();i++){
OHLCSeries series=(OHLCSeries)this.data.get(i);
series.removeChangeListener(this);
}
this.data.clear();
fireDatasetChanged(new DatasetChangeInfo());

1.1145868583186047
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/ohlc/OHLCSeriesCollection.java<424,437>


-------- Patch ---------
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
if(this.data.size()==0){
return ;
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
this.data.clear();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
TimePeriodValues ts=(TimePeriodValues)this.data.get(series);
TimePeriodValue dp=ts.getDataItem(item);
return new Long(dp.getPeriod().getStart().getTime());

1.114239578026642
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/TimePeriodValuesCollection.java<281,283>

-------- No Patch ---------


-------- Similar Code ---------
TimePeriodValues ts=(TimePeriodValues)this.data.get(series);
TimePeriodValue dp=ts.getDataItem(item);
return new Long(dp.getPeriod().getEnd().getTime());

1.114239578026642
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/TimePeriodValuesCollection.java<295,297>

-------- No Patch ---------


-------- Similar Code ---------
TimeSeriesDataItem temp=new TimeSeriesDataItem(period,value);
int index=Collections.binarySearch(this.data,temp);
if(index<0){
throw new SeriesException("There is no existing value for the "+"specified \'period\'.");
}
update(index,value);

1.1125440052385311
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/TimeSeries.java<705,711>


-------- Repeated Patch ---------
if(index<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<start){
throw new SeriesException("There is no existing value for the "+"specified \'period\'.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
for(int s=0;s<this.data.size();s++){
XYSeries series=(XYSeries)this.data.get(s);
if(series.getY(series.indexOf(x))!=null){
return false;
}
}

1.1009133009617333
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/DefaultTableXYDataset.java<453,458>

-------- No Patch ---------


-------- Similar Code ---------
Number result=null;
BoxAndWhiskerItem item=(BoxAndWhiskerItem)this.data.getObject(row,column);
if(item!=null){
result=item.getMean();
}
return result;

1.100303568480918
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java<357,363>


-------- Repeated Patch ---------
if(item<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
Number result=null;
BoxAndWhiskerItem item=(BoxAndWhiskerItem)this.data.getObject(rowKey,columnKey);
if(item!=null){
result=item.getMean();
}
return result;

1.100303568480918
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java<377,383>


-------- Repeated Patch ---------
if(item<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
Number result=null;
BoxAndWhiskerItem item=(BoxAndWhiskerItem)this.data.getObject(row,column);
if(item!=null){
result=item.getMedian();
}
return result;

1.100303568480918
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java<397,403>


-------- Repeated Patch ---------
if(item<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
Number result=null;
BoxAndWhiskerItem item=(BoxAndWhiskerItem)this.data.getObject(rowKey,columnKey);
if(item!=null){
result=item.getMedian();
}
return result;

1.100303568480918
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java<417,423>


-------- Repeated Patch ---------
if(item<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
Number result=null;
BoxAndWhiskerItem item=(BoxAndWhiskerItem)this.data.getObject(row,column);
if(item!=null){
result=item.getQ1();
}
return result;

1.100303568480918
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java<437,443>


-------- Repeated Patch ---------
if(item<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
Number result=null;
BoxAndWhiskerItem item=(BoxAndWhiskerItem)this.data.getObject(rowKey,columnKey);
if(item!=null){
result=item.getQ1();
}
return result;

1.100303568480918
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java<457,463>


-------- Repeated Patch ---------
if(item<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
Number result=null;
BoxAndWhiskerItem item=(BoxAndWhiskerItem)this.data.getObject(row,column);
if(item!=null){
result=item.getQ3();
}
return result;

1.100303568480918
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java<477,483>


-------- Repeated Patch ---------
if(item<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
Number result=null;
BoxAndWhiskerItem item=(BoxAndWhiskerItem)this.data.getObject(rowKey,columnKey);
if(item!=null){
result=item.getQ3();
}
return result;

1.100303568480918
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java<497,503>


-------- Repeated Patch ---------
if(item<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
Number result=null;
BoxAndWhiskerItem item=(BoxAndWhiskerItem)this.data.getObject(row,column);
if(item!=null){
result=item.getMinRegularValue();
}
return result;

1.100303568480918
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java<654,660>


-------- Repeated Patch ---------
if(item<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
Number result=null;
BoxAndWhiskerItem item=(BoxAndWhiskerItem)this.data.getObject(rowKey,columnKey);
if(item!=null){
result=item.getMinRegularValue();
}
return result;

1.100303568480918
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java<674,680>


-------- Repeated Patch ---------
if(item<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
Number result=null;
BoxAndWhiskerItem item=(BoxAndWhiskerItem)this.data.getObject(row,column);
if(item!=null){
result=item.getMaxRegularValue();
}
return result;

1.100303568480918
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java<694,700>


-------- Repeated Patch ---------
if(item<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
Number result=null;
BoxAndWhiskerItem item=(BoxAndWhiskerItem)this.data.getObject(rowKey,columnKey);
if(item!=null){
result=item.getMaxRegularValue();
}
return result;

1.100303568480918
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java<714,720>


-------- Repeated Patch ---------
if(item<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
Number result=null;
BoxAndWhiskerItem item=(BoxAndWhiskerItem)this.data.getObject(row,column);
if(item!=null){
result=item.getMinOutlier();
}
return result;

1.100303568480918
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java<734,740>


-------- Repeated Patch ---------
if(item<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
Number result=null;
BoxAndWhiskerItem item=(BoxAndWhiskerItem)this.data.getObject(rowKey,columnKey);
if(item!=null){
result=item.getMinOutlier();
}
return result;

1.100303568480918
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java<754,760>


-------- Repeated Patch ---------
if(item<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
Number result=null;
BoxAndWhiskerItem item=(BoxAndWhiskerItem)this.data.getObject(row,column);
if(item!=null){
result=item.getMaxOutlier();
}
return result;

1.100303568480918
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java<774,780>


-------- Repeated Patch ---------
if(item<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
Number result=null;
BoxAndWhiskerItem item=(BoxAndWhiskerItem)this.data.getObject(rowKey,columnKey);
if(item!=null){
result=item.getMaxOutlier();
}
return result;

1.100303568480918
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java<794,800>


-------- Repeated Patch ---------
if(item<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
List result=null;
BoxAndWhiskerItem item=(BoxAndWhiskerItem)this.data.getObject(row,column);
if(item!=null){
result=item.getOutliers();
}
return result;

1.100303568480918
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java<814,820>


-------- Repeated Patch ---------
if(item<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
List result=null;
BoxAndWhiskerItem item=(BoxAndWhiskerItem)this.data.getObject(rowKey,columnKey);
if(item!=null){
result=item.getOutliers();
}
return result;

1.100303568480918
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java<834,840>


-------- Repeated Patch ---------
if(item<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
Number result=null;
MeanAndStandardDeviation masd=(MeanAndStandardDeviation)this.data.getObject(row,column);
if(masd!=null){
result=masd.getMean();
}
return result;

1.100303568480918
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java<153,159>


-------- Patch ---------
if(masd<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
Number result=null;
MeanAndStandardDeviation masd=(MeanAndStandardDeviation)this.data.getObject(rowKey,columnKey);
if(masd!=null){
result=masd.getMean();
}
return result;

1.100303568480918
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java<197,203>


-------- Repeated Patch ---------
if(masd<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
Number result=null;
MeanAndStandardDeviation masd=(MeanAndStandardDeviation)this.data.getObject(row,column);
if(masd!=null){
result=masd.getStandardDeviation();
}
return result;

1.100303568480918
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java<215,221>


-------- Repeated Patch ---------
if(masd<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
Number result=null;
MeanAndStandardDeviation masd=(MeanAndStandardDeviation)this.data.getObject(rowKey,columnKey);
if(masd!=null){
result=masd.getStandardDeviation();
}
return result;

1.100303568480918
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java<233,239>


-------- Repeated Patch ---------
if(masd<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
TimePeriodValues ts=(TimePeriodValues)this.data.get(series);
TimePeriodValue dp=ts.getDataItem(item);
TimePeriod period=dp.getPeriod();
return new Long(getX(period));

1.098136702008207
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/TimePeriodValuesCollection.java<241,244>

-------- No Patch ---------


-------- Similar Code ---------
int i=0;
Iterator iterator=this.data.iterator();
while(iterator.hasNext()){
KeyedObject ko=(KeyedObject)iterator.next();
if(ko.getKey().equals(key)){
return i;
}
i++;
}

1.097860576455894
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/KeyedObjects.java<136,144>

-------- No Patch ---------


-------- Similar Code ---------
if(start>maxStart){
this.maxStartIndex=index;
}

1.0949261121262417
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/TimePeriodValues.java<277,279>


-------- Patch ---------
if(end<maxStart){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(end<minEnd){
this.minEndIndex=index;
}

1.0949261121262417
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/TimePeriodValues.java<316,318>


-------- Patch ---------
if(end<minEnd){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(end>maxEnd){
this.maxEndIndex=index;
}

1.0949261121262417
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/TimePeriodValues.java<327,329>


-------- Patch ---------
if(end<maxEnd){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
int result=17;
result=37*result+(int)this.start;
result=37*result+(int)this.end;
return result;

1.0930674011436419
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/SimpleTimePeriod.java<216,219>

-------- No Patch ---------


-------- Similar Code ---------
if(seriesIndex==-1){
this.seriesKeys.add(seriesKey);
this.seriesList.add(data);
}else {
this.seriesList.remove(seriesIndex);
this.seriesList.add(seriesIndex,data);
}

1.0930033304397577
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/DefaultIntervalXYDataset.java<426,433>


-------- Patch ---------
if(seriesIndex<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(seriesIndex==-1){
this.seriesKeys.add(seriesKey);
this.seriesList.add(data);
}else {
this.seriesList.remove(seriesIndex);
this.seriesList.add(seriesIndex,data);
}

1.0930033304397577
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/DefaultXYDataset.java<269,276>


-------- Repeated Patch ---------
if(seriesIndex<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(seriesIndex==-1){
this.seriesKeys.add(seriesKey);
this.seriesList.add(data);
}else {
this.seriesList.remove(seriesIndex);
this.seriesList.add(seriesIndex,data);
}

1.0930033304397577
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/DefaultXYZDataset.java<314,321>


-------- Repeated Patch ---------
if(seriesIndex<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(obj==this){
return true;
}
if(!(obj instanceof VectorSeriesCollection)){
return false;
}
VectorSeriesCollection that=(VectorSeriesCollection)obj;
return ObjectUtilities.equal(this.data,that.data);

1.0927120845493148
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/VectorSeriesCollection.java<310,317>


-------- Patch ---------
if(obj<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<start){
if(start==this){
return true;
}
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
if(!(start instanceof VectorSeriesCollection)){
return false;
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(obj==this){
return true;
}
if(!(obj instanceof XYIntervalSeriesCollection)){
return false;
}
XYIntervalSeriesCollection that=(XYIntervalSeriesCollection)obj;
return ObjectUtilities.equal(this.data,that.data);

1.0927120845493148
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/XYIntervalSeriesCollection.java<360,367>


-------- Repeated Patch ---------
if(obj<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<start){
if(start==this){
return true;
}
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
if(!(start instanceof XYIntervalSeriesCollection)){
return false;
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(obj<start){
if(start==this){
return true;
}
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(obj==this){
return true;
}
if(!(obj instanceof YIntervalSeriesCollection)){
return false;
}
YIntervalSeriesCollection that=(YIntervalSeriesCollection)obj;
return ObjectUtilities.equal(this.data,that.data);

1.0927120845493148
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/YIntervalSeriesCollection.java<335,342>


-------- Repeated Patch ---------
if(obj<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<start){
if(start==this){
return true;
}
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
if(!(start instanceof YIntervalSeriesCollection)){
return false;
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(obj<start){
if(start==this){
return true;
}
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(obj==this){
return true;
}
if(!(obj instanceof XIntervalSeriesCollection)){
return false;
}
XIntervalSeriesCollection that=(XIntervalSeriesCollection)obj;
return ObjectUtilities.equal(this.data,that.data);

1.0927120845493148
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/XIntervalSeriesCollection.java<337,344>


-------- Repeated Patch ---------
if(obj<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<start){
if(start==this){
return true;
}
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
if(!(start instanceof XIntervalSeriesCollection)){
return false;
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(obj<start){
if(start==this){
return true;
}
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
OHLCSeries s=(OHLCSeries)this.data.get(series);
OHLCItem di=(OHLCItem)s.getDataItem(item);
RegularTimePeriod period=di.getPeriod();
return getX(period);

1.092018553565962
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/ohlc/OHLCSeriesCollection.java<215,218>

-------- No Patch ---------


-------- Similar Code ---------
if(mean!=null){
m=mean.doubleValue();
}
if(standardDeviation!=null){
sd=standardDeviation.doubleValue();
}
int r=this.data.getColumnIndex(columnKey);
int c=this.data.getRowIndex(rowKey);

1.090609099170535
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java<357,366>


-------- Patch ---------
if(mean<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(row<rowCount){
Number n=data.getValue(row,column);
if(n!=null){
total+=n.doubleValue();
}
}

1.0902878642174278
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/DataUtilities.java<159,164>


-------- Patch ---------
if(row<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<rowCount){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(col<colCount){
Number n=data.getValue(row,col);
if(n!=null){
total+=n.doubleValue();
}
}

1.0902878642174278
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/DataUtilities.java<214,219>


-------- Patch ---------
if(col<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<colCount){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(getDarkerSides()){
if(paint instanceof Color){
Color c=(Color)paint;
c=c.darker();
paint=c;
}
}
double start=arc.getAngleStart();
double extent=arc.getAngleExtent();

1.087498955078167
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/plot/PiePlot3D.java<621,630>

-------- No Patch ---------


-------- Similar Code ---------
if(data instanceof YisSymbolic){
yStr=((YisSymbolic)data).getYSymbolicValue(series,item);
}else {
double y=data.getYValue(series,item);
yStr=Double.toString(round(y,2));
}

1.0874471524315883
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/labels/SymbolicXYItemLabelGenerator.java<84,90>

-------- No Patch ---------


-------- Similar Code ---------
if(obj==this){
return true;
}
if(!(obj instanceof DefaultMultiValueCategoryDataset)){
return false;
}
DefaultMultiValueCategoryDataset that=(DefaultMultiValueCategoryDataset)obj;
return this.data.equals(that.data);

1.0869503434132668
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/statistics/DefaultMultiValueCategoryDataset.java<382,390>


-------- Repeated Patch ---------
if(obj<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<start){
if(start==this){
return true;
}
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
if(!(start instanceof DefaultMultiValueCategoryDataset)){
return false;
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(obj<start){
if(start==this){
return true;
}
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
Number result=null;
int row=getRowIndex(rowKey);
TaskSeries series=(TaskSeries)this.data.get(row);
Task task=series.get(columnKey.toString());
if(task!=null){
result=task.getPercentComplete();
}
return result;

1.0865727312148326
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/gantt/TaskSeriesCollection.java<456,463>


-------- Patch ---------
if(task<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
int result=0;
int row=getRowIndex(rowKey);
TaskSeries series=(TaskSeries)this.data.get(row);
Task task=series.get(columnKey.toString());
if(task!=null){
result=task.getSubtaskCount();
}
return result;

1.0865727312148326
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/gantt/TaskSeriesCollection.java<489,496>


-------- Repeated Patch ---------
if(task<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
XYItemRendererState state=super.initialise(g2,dataArea,plot,data,info);
state.setProcessVisibleItemsOnly(false);
return state;

1.08533746948781
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/renderer/xy/XYDifferenceRenderer.java<343,346>

-------- No Patch ---------


-------- Similar Code ---------
XYItemRendererState state=super.initialise(g2,dataArea,plot,data,info);
state.setProcessVisibleItemsOnly(false);
return state;

1.08533746948781
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/renderer/xy/XYStepAreaRenderer.java<323,328>

-------- No Patch ---------


-------- Similar Code ---------
if(this.autoSort){
return Collections.binarySearch(this.data,new XYDataItem(x,null));
}else {
for(int i=0;i<this.data.size();i++){
XYDataItem item=(XYDataItem)this.data.get(i);
if(item.getX().equals(x)){
return i;
}
}
return -1;
}

1.0846539695200992
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/XYSeries.java<863,874>

-------- No Patch ---------


-------- Similar Code ---------
if(this.autoSort){
return Collections.binarySearch(this.data,new ComparableObjectItem(x,null));
}else {
for(int i=0;i<this.data.size();i++){
ComparableObjectItem item=(ComparableObjectItem)this.data.get(i);
if(item.getComparable().equals(x)){
return i;
}
}
return -1;
}

1.0846539695200992
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/ComparableObjectSeries.java<275,288>

-------- No Patch ---------


-------- Similar Code ---------
Number result=null;
int row=getRowIndex(rowKey);
TaskSeries series=(TaskSeries)this.data.get(row);
Task task=series.get(columnKey.toString());
if(task!=null){
TimePeriod duration=task.getDuration();
if(duration!=null){
result=new Long(duration.getStart().getTime());
}
}

1.083135778317418
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/gantt/TaskSeriesCollection.java<369,378>


-------- Repeated Patch ---------
if(task<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
Number result=null;
int row=getRowIndex(rowKey);
TaskSeries series=(TaskSeries)this.data.get(row);
Task task=series.get(columnKey.toString());
if(task!=null){
TimePeriod duration=task.getDuration();
if(duration!=null){
result=new Long(duration.getEnd().getTime());
}
}

1.083135778317418
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/gantt/TaskSeriesCollection.java<406,415>


-------- Repeated Patch ---------
if(task<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
int hash=5;
hash=HashUtilities.hashCode(hash,this.intervalDelegate);
hash=HashUtilities.hashCode(hash,this.data);
return hash;

1.0827238914953556
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/XYSeriesCollection.java<515,518>

-------- No Patch ---------


-------- Similar Code ---------
if(data instanceof TimeSeriesCollection){
RegularTimePeriod p=((TimeSeriesCollection)data).getSeries(series).getTimePeriod(item);
xStr=p.toString();
}else {
double x=data.getXValue(series,item);
xStr=Double.toString(round(x,2));
}

1.0809251761146945
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/labels/SymbolicXYItemLabelGenerator.java<94,103>

-------- No Patch ---------


-------- Similar Code ---------
if(keyIndex>=0){
KeyedObject ko=(KeyedObject)this.data.get(keyIndex);
ko.setObject(object);
}else {
KeyedObject ko=new KeyedObject(key,object);
this.data.add(ko);
}

1.080664266764675
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/KeyedObjects.java<206,213>


-------- Patch ---------
if(keyIndex<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
for(int i=0;i<count;i++){
TaskSeries s=(TaskSeries)this.data.get(i);
if(s.getKey().equals(rowKey)){
result=i;
break;
}
}

1.0772996628273552
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/gantt/TaskSeriesCollection.java<222,228>

-------- No Patch ---------


-------- Similar Code ---------
if(range.contains(start)){
line.setLine(x0,start2d,x1,start2d);
g2.draw(line);
}

1.0770756894599678
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java<1291,1294>

-------- No Patch ---------


-------- Similar Code ---------
if(range.contains(end)){
line.setLine(x0,end2d,x1,end2d);
g2.draw(line);
}

1.0770756894599678
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java<1295,1298>

-------- No Patch ---------


-------- Similar Code ---------
if(range.contains(start)){
line.setLine(start2d,y0,start2d,y1);
g2.draw(line);
}

1.0770756894599678
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java<1306,1309>

-------- No Patch ---------


-------- Similar Code ---------
if(range.contains(end)){
line.setLine(end2d,y0,end2d,y1);
g2.draw(line);
}

1.0770756894599678
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java<1310,1313>

-------- No Patch ---------


-------- Similar Code ---------
if(range.contains(start)){
line.setLine(start2d,y0,start2d,y1);
g2.draw(line);
}

1.0770756894599678
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java<1415,1418>

-------- No Patch ---------


-------- Similar Code ---------
if(range.contains(end)){
line.setLine(end2d,y0,end2d,y1);
g2.draw(line);
}

1.0770756894599678
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java<1419,1422>

-------- No Patch ---------


-------- Similar Code ---------
if(range.contains(start)){
line.setLine(x0,start2d,x1,start2d);
g2.draw(line);
}

1.0770756894599678
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java<1430,1433>

-------- No Patch ---------


-------- Similar Code ---------
if(range.contains(end)){
line.setLine(x0,end2d,x1,end2d);
g2.draw(line);
}

1.0770756894599678
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java<1434,1437>

-------- No Patch ---------


-------- Similar Code ---------
if(range.contains(start)){
line.setLine(x0,start2d,x1,start2d);
g2.draw(line);
}

1.0770756894599678
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java<1614,1617>

-------- No Patch ---------


-------- Similar Code ---------
if(range.contains(end)){
line.setLine(x0,end2d,x1,end2d);
g2.draw(line);
}

1.0770756894599678
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java<1618,1621>

-------- No Patch ---------


-------- Similar Code ---------
if(range.contains(start)){
line.setLine(start2d,y0,start2d,y1);
g2.draw(line);
}

1.0770756894599678
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java<1629,1632>

-------- No Patch ---------


-------- Similar Code ---------
if(range.contains(end)){
line.setLine(end2d,y0,end2d,y1);
g2.draw(line);
}

1.0770756894599678
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java<1633,1636>

-------- No Patch ---------


-------- Similar Code ---------
this.data.setValue(value,chipx,chipy);
if(isMaxValue(value)){
this.maxValue=(Double)value;
}
if(isMinValue(value)){
this.minValue=(Double)value;
}

1.0754998853942306
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/general/WaferMapDataset.java<145,151>

-------- No Patch ---------


-------- Similar Code ---------
if(orientation==PlotOrientation.HORIZONTAL){
space=dataArea.getHeight();
}else if(orientation==PlotOrientation.VERTICAL){
space=dataArea.getWidth();
}
double maxWidth=space*getMaximumBarWidth();
int columns=data.getColumnCount();
double categoryMargin=0.0;
if(columns>1){
categoryMargin=xAxis.getCategoryMargin();
}

1.0750973520220999
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/renderer/category/StackedBarRenderer.java<245,256>


-------- Repeated Patch ---------
if(orientation<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<HORIZONTAL){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
int rowIndex=this.data.getRowIndex(chipx);
if(rowIndex<0){
return null;
}
int colIndex=this.data.getColumnIndex(chipy);
if(colIndex<0){
return null;
}
return this.data.getValue(rowIndex,colIndex);

1.0739987068716839
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/general/WaferMapDataset.java<203,211>


-------- Patch ---------
if(colIndex<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<start){
if(start<0){
return null;
}
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(data<0){
return null;
}
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(obj==this){
return true;
}
if(!(obj instanceof XYSeriesCollection)){
return false;
}
XYSeriesCollection that=(XYSeriesCollection)obj;
if(!this.intervalDelegate.equals(that.intervalDelegate)){
return false;
}
return ObjectUtilities.equal(this.data,that.data);

1.071216131526051
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/XYSeriesCollection.java<481,491>


-------- Repeated Patch ---------
if(obj<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<start){
if(start==this){
return true;
}
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
if(!(start instanceof XYSeriesCollection)){
return false;
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(obj<start){
if(start==this){
return true;
}
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(obj==this){
return true;
}
if(!(obj instanceof OHLCSeriesCollection)){
return false;
}
OHLCSeriesCollection that=(OHLCSeriesCollection)obj;
if(!this.xPosition.equals(that.xPosition)){
return false;
}
return ObjectUtilities.equal(this.data,that.data);

1.071216131526051
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/ohlc/OHLCSeriesCollection.java<450,460>


-------- Repeated Patch ---------
if(obj<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<start){
if(start==this){
return true;
}
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
if(!(start instanceof OHLCSeriesCollection)){
return false;
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(obj<start){
if(start==this){
return true;
}
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
TaskSeries s=this.underlying.getSeries(series);
Task t=s.get(item);
TimePeriod duration=t.getDuration();
Date start=duration.getStart();
return start.getTime();

1.071040807904554
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/gantt/XYTaskDataset.java<398,402>

-------- No Patch ---------


-------- Similar Code ---------
TaskSeries s=this.underlying.getSeries(series);
Task t=s.get(item);
TimePeriod duration=t.getDuration();
Date end=duration.getEnd();
return end.getTime();

1.071040807904554
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/gantt/XYTaskDataset.java<406,410>

-------- No Patch ---------


-------- Similar Code ---------
for(int i=0;i<data.getItemCount();i++){
Number v=data.getValue(i);
if(v!=null){
total=total+v.doubleValue();
}
}

1.070674557710168
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/DataUtilities.java<279,284>

-------- No Patch ---------


-------- Similar Code ---------
double x1=axis.valueToJava2D(start,dataArea,plot.getDomainAxisEdge());
double x2=axis.valueToJava2D(end,dataArea,plot.getDomainAxisEdge());
Rectangle2D band;
if(plot.getOrientation()==PlotOrientation.VERTICAL){
band=new Rectangle2D.Double(Math.min(x1,x2),dataArea.getMinY(),Math.abs(x2-x1),dataArea.getWidth());
}else {
band=new Rectangle2D.Double(dataArea.getMinX(),Math.min(x1,x2),dataArea.getWidth(),Math.abs(x2-x1));
}

1.0704328138021741
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java<1112,1124>

-------- No Patch ---------


-------- Similar Code ---------
double y1=axis.valueToJava2D(start,dataArea,plot.getRangeAxisEdge());
double y2=axis.valueToJava2D(end,dataArea,plot.getRangeAxisEdge());
Rectangle2D band;
if(plot.getOrientation()==PlotOrientation.VERTICAL){
band=new Rectangle2D.Double(dataArea.getMinX(),Math.min(y1,y2),dataArea.getWidth(),Math.abs(y2-y1));
}else {
band=new Rectangle2D.Double(Math.min(y1,y2),dataArea.getMinY(),Math.abs(y2-y1),dataArea.getHeight());
}

1.0704328138021741
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java<1148,1159>

-------- No Patch ---------


-------- Similar Code ---------
TimeSeries result=null;
Iterator iterator=this.data.iterator();
while(iterator.hasNext()){
TimeSeries series=(TimeSeries)iterator.next();
Comparable k=series.getKey();
if(k!=null&&k.equals(key)){
result=series;
}
}
return result;

1.0698560819933156
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/TimeSeriesCollection.java<289,298>


-------- Patch ---------
if(k<k){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(k<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<k){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(this.timePeriodClass==null){
this.timePeriodClass=periodClass;
}else if(!this.timePeriodClass.equals(periodClass)){
String msg="You are trying to add data where the time "+"period class is "+periodClass.getName();
throw new SeriesException(msg);
}
TimeSeriesDataItem overwritten=null;
int index=Collections.binarySearch(this.data,item);

1.068574826769841
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/TimeSeries.java<813,824>

-------- No Patch ---------


-------- Similar Code ---------
double m=Double.NaN;
double sd=Double.NaN;
MeanAndStandardDeviation masd=(MeanAndStandardDeviation)this.data.getObject(r,c);
if(masd==null){
continue;
}
m=masd.getMeanValue();

1.0660067082337557
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java<559,566>


-------- Repeated Patch ---------
if(masd<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
copy=start.getMeanValue();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
int index=this.data.getIndex(key);
PieDatasetChangeType ct=PieDatasetChangeType.ADD;
if(index>=0){
ct=PieDatasetChangeType.UPDATE;
}
this.data.setObject(key,new SelectableValue(value));
PieDatasetChangeInfo info=new PieDatasetChangeInfo(ct,index,index);
fireDatasetChanged(info);

1.0657324285976388
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/pie/DefaultPieDataset.java<205,213>

-------- No Patch ---------


-------- Similar Code ---------
Number result=null;
int row=getRowIndex(rowKey);
TaskSeries series=(TaskSeries)this.data.get(row);
Task task=series.get(columnKey.toString());
if(task!=null){
Task sub=task.getSubtask(subinterval);
if(sub!=null){
TimePeriod duration=sub.getDuration();
result=new Long(duration.getStart().getTime());
}
}

1.0641212489654486
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/gantt/TaskSeriesCollection.java<525,535>


-------- Repeated Patch ---------
if(task<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
Number result=null;
int row=getRowIndex(rowKey);
TaskSeries series=(TaskSeries)this.data.get(row);
Task task=series.get(columnKey.toString());
if(task!=null){
Task sub=task.getSubtask(subinterval);
if(sub!=null){
TimePeriod duration=sub.getDuration();
result=new Long(duration.getEnd().getTime());
}
}

1.0641212489654486
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/gantt/TaskSeriesCollection.java<565,575>


-------- Repeated Patch ---------
if(task<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
Number result=null;
int row=getRowIndex(rowKey);
TaskSeries series=(TaskSeries)this.data.get(row);
Task task=series.get(columnKey.toString());
if(task!=null){
Task sub=task.getSubtask(subinterval);
if(sub!=null){
result=sub.getPercentComplete();
}
}

1.0640348074671742
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/gantt/TaskSeriesCollection.java<605,614>


-------- Repeated Patch ---------
if(task<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
for(int c=0;c<this.data.getColumnCount();c++){
Number value=this.data.getValue(r,c);
if(value!=null){
unique.add(value);
}
}

1.0638137365054785
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/general/WaferMapDataset.java<172,177>


-------- Patch ---------
if(value<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
for(int i=start;i<limit1;i++){
if(c1!=c2){
return false;
}
c1=it1.next();
c2=it2.next();
}

1.0602422627908015
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/util/AttributedStringUtilities.java<95,101>


-------- Patch ---------
if(c1<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<c2){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<start){
if(data!=end){
return false;
}
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(count>1){
Number value=(Number)values.get(start+(count-1)/2);
result=value.doubleValue();
}else {
Number value=(Number)values.get(start);
result=value.doubleValue();
}

1.0575795251835243
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/statistics/Statistics.java<279,287>


-------- Repeated Patch ---------
if(count<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(getItemCount()>0){
this.data.clear();
PieDatasetChangeType ct=PieDatasetChangeType.CLEAR;
fireDatasetChanged(new PieDatasetChangeInfo(ct,-1,-1));
}

1.0564983148949212
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/pie/DefaultPieDataset.java<290,294>

-------- No Patch ---------


-------- Similar Code ---------
if(fieldIndex==0){
String key=line.substring(start,i);
rowKey=removeStringDelimiters(key);
}else {
Double value=Double.valueOf(removeStringDelimiters(line.substring(start,i)));
dataset.addValue(value,rowKey,(Comparable)columnKeys.get(fieldIndex-1));
}

1.0555482597212407
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/io/CSV.java<157,169>


-------- Repeated Patch ---------
if(fieldIndex<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
TaskSeries series=(TaskSeries)this.data.get(i);
Iterator iterator=series.getTasks().iterator();
while(iterator.hasNext()){
Task task=(Task)iterator.next();
String key=task.getDescription();
int index=this.keys.indexOf(key);
if(index<0){
this.keys.add(key);
}
}

1.0518729142857959
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/gantt/TaskSeriesCollection.java<636,646>


-------- Repeated Patch ---------
if(index<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
for(int i=0;i<data.getItemCount();i++){
Number v=data.getValue(i);
if(v!=null){
runningTotal=runningTotal+v.doubleValue();
}
result.addValue(data.getKey(i),new Double(runningTotal/total));
}

1.0489114291823554
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/DataUtilities.java<286,292>


-------- Patch ---------
if(v<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
String line=input.substring(start,index);
if(index<input.length()-1){
result.addLine(line,font,paint);
input=input.substring(index+1);
}else {
moreInputToProcess=false;
}

1.0487847639519485
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/text/TextUtilities.java<126,133>


-------- Repeated Patch ---------
if(index<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<input){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(index==start){
if(index<input.length()-1){
input=input.substring(index+1);
}else {
moreInputToProcess=false;
}
}else {
result.addLine(input,font,paint);
moreInputToProcess=false;
}

1.045902261945407
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/text/TextUtilities.java<135,146>


-------- Repeated Patch ---------
if(index<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
{
int index=Collections.binarySearch(this.data,item);
if(index<0){
this.data.add(-index-1,item);
added=true;
}else {
StringBuffer b=new StringBuffer();
b.append("You are attempting to add an observation for ");
b.append("the time period ");
b.append(item.getPeriod().toString());
b.append(" but the series already contains an observation");
b.append(" for that time period. Duplicates are not ");
b.append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(b.toString());
}
}

1.0451046259360832
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/TimeSeries.java<608,624>


-------- Repeated Patch ---------
if(index<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<start){
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<start){
new StringBuffer().append("the time period ");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<start){
new StringBuffer().append(" but the series already contains an observation");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<start){
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<start){
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(properties||copy){
this.popup=createPopupMenu(properties,copy,save,print,zoom);
}

1.0404942587198611
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/ChartPanel.java<763,765>


-------- Patch ---------
if(properties<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<copy){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(xObject instanceof Number){
xNumber=(Number)xObject;
}else {
if(xObject instanceof Date){
Date xDate=(Date)xObject;
xNumber=new Long(xDate.getTime());
}else {
xNumber=new Integer(0);
}
}
Number windDir=(Number)data[seriesIndex][itemIndex][1];

1.039186911568509
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/DefaultWindDataset.java<147,159>

-------- No Patch ---------


-------- Similar Code ---------
double total=0.0;
int rowCount=data.getRowCount();
for(int r=0;r<rowCount;r++){
Number n=data.getValue(r,column);
if(n!=null){
total+=n.doubleValue();
}
}

1.0353615394252418
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/DataUtilities.java<127,134>


-------- Repeated Patch ---------
if(n<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
double total=0.0;
int columnCount=data.getColumnCount();
for(int c=0;c<columnCount;c++){
Number n=data.getValue(row,c);
if(n!=null){
total+=n.doubleValue();
}
}

1.0353615394252418
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/DataUtilities.java<182,189>


-------- Repeated Patch ---------
if(n<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
int r=getRowIndex(rowKey);
int c=getColumnIndex(columnKey);
this.data.removeObject(rowKey,columnKey);
if((this.maximumRangeValueRow==r&&this.maximumRangeValueColumn==c)||(this.minimumRangeValueRow==r&&this.minimumRangeValueColumn==c)){
updateBounds();
}
fireDatasetChanged(new DatasetChangeInfo());

1.0315656315341086
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java<207,219>


-------- Patch ---------
if(r<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(c<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(r<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(c<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
int r=getRowIndex(rowKey);
int c=getColumnIndex(columnKey);
this.data.removeObject(rowKey,columnKey);
if((r==this.maximumRangeValueRow&&c==this.maximumRangeValueColumn)||(r==this.maximumRangeValueIncStdDevRow&&c==this.maximumRangeValueIncStdDevColumn)){
updateBounds();
}
fireDatasetChanged(new DatasetChangeInfo());

1.0315656315341086
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java<433,452>


-------- Repeated Patch ---------
if(r<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(r<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(r<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(r<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(r<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(r<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(r<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(r<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(c<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(r<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(end<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(r<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(c<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(r<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(end<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(r<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(r<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(r<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(c<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(end<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(end<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(r<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(r<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(r<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(r<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(r<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(r<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(c<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(r<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(r<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(r<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(r<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(r<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(r<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(r<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(c<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(r<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(r<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(r<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(r<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(c<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(r<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(end<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(r<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(r<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(r<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(c<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(end<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(end<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(r<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(c<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(r<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(r<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(r<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(c<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(c<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(c<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(r<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(r<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(r<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(c<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(end<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(end<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(c<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(r<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(r<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(r<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(c<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(c<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(end<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(r<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(c<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(r<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(r<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(r<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(r<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(r<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(r<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(r<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(c<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(r<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(r<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(r<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(r<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(c<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(r<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(r<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(r<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(c<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(c<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(c<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(r<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(r<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(r<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(c<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(r<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(r<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(r<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(c<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(r<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(r<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(r<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(c<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(c<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(r<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(r<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(c<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(r<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(r<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(r<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(c<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(c<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(c<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(r<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(r<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(r<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(c<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(end<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(end<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(c<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(r<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(r<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(r<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(c<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(c<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(end<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(r<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(r<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(r<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(c<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(c<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(c<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(c<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(r<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(r<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(r<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(c<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(c<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(c<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(c<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(r<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(r<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(r<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(c<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(c<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(end<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(c<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(c<r){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(c<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(r<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
fireDatasetChanged(new DatasetChangeInfo());
if(c<c){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(copyAndSort){
int itemCount=values.size();
List copy=new ArrayList(itemCount);
for(int i=0;i<itemCount;i++){
copy.add(i,values.get(i));
}
Collections.sort(copy);
values=copy;
}

1.0309493362512627
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/statistics/Statistics.java<203,211>

-------- No Patch ---------


-------- Similar Code ---------
while(iterator.hasNext()){
Object obj=iterator.next();
if(obj instanceof Number){
Number n=(Number)obj;
double v=n.doubleValue();
if(!Double.isNaN(v)){
vlist.add(n);
}
}
}
Collections.sort(vlist);
this.data.addObject(vlist,rowKey,columnKey);

1.0278069964592225
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/statistics/DefaultMultiValueCategoryDataset.java<117,128>

-------- No Patch ---------


-------- Similar Code ---------
if(!this.xPoints.contains(xValue)){
this.xPoints.add(xValue);
int seriesCount=this.data.size();
for(int seriesNo=0;seriesNo<seriesCount;seriesNo++){
XYSeries dataSeries=(XYSeries)this.data.get(seriesNo);
if(!dataSeries.equals(series)){
dataSeries.add(xValue,null);
}
}
}

1.0276594914465553
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/DefaultTableXYDataset.java<178,187>

-------- No Patch ---------


-------- Similar Code ---------
while(iterator.hasNext()){
ValueTick tick=(ValueTick)iterator.next();
double current=tick.getValue();
if(fillBand){
getRenderer().fillDomainGridBand(g2,this,xAxis,dataArea,previous,current);
}
previous=current;
fillBand=!fillBand;
}
double end=xAxis.getUpperBound();

1.0267845554524229
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/plot/XYPlot.java<3650,3660>

-------- No Patch ---------


-------- Similar Code ---------
while(iterator.hasNext()){
ValueTick tick=(ValueTick)iterator.next();
double current=tick.getValue();
if(fillBand){
getRenderer().fillRangeGridBand(g2,this,axis,dataArea,previous,current);
}
previous=current;
fillBand=!fillBand;
}
double end=axis.getUpperBound();

1.0267845554524229
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/plot/XYPlot.java<3685,3695>

-------- No Patch ---------


-------- Similar Code ---------
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
boolean iterate=false;
Number oldYN=item.getValue();
if(oldYN!=null){
double oldY=oldYN.doubleValue();
if(!Double.isNaN(oldY)){
iterate=oldY<=this.minY||oldY>=this.maxY;
}
}

1.0253249602743
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/TimeSeries.java<721,729>


-------- Patch ---------
if(data.getValue()!=null){
double data.getValue().doubleValue()=oldYN.doubleValue();
if(!Double.isNaN(oldY)){
copy=oldY<=this.end||oldY>=this.start;
}
}
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
Number[] result=new Number[data.length];
for(int i=0;i<data.length;i++){
result[i]=new Double(data[i]);
}
return result;

1.021109363618877
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/DefaultHighLowDataset.java<429,433>

-------- No Patch ---------


-------- Similar Code ---------
float x=0.0;
boolean firstWord=true;
int newline=text.indexOf('\n',start);
if(newline<0){
newline=Integer.MAX_VALUE;
}

1.015841564756161
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/text/TextUtilities.java<243,248>


-------- Patch ---------
if(newline<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
int result;
result=this.data.hashCode();
result=29*result+(this.workingCalendar!=null?this.workingCalendar.hashCode():0);
result=29*result+(this.xPosition!=null?this.xPosition.hashCode():0);
return result;

1.0150068666058123
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/TimeSeriesCollection.java<767,773>

-------- No Patch ---------


-------- Similar Code ---------
if(data!=null&&data.getValue()!=null){
value=(data.getValue().doubleValue())%this.revolutionDistance;
value=value/this.revolutionDistance*360;
current=i%x;
this.seriesNeedle[current].draw(g2,needleArea,value);
}

1.014148816829203
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/plot/CompassPlot.java<685,691>

-------- No Patch ---------


-------- Similar Code ---------
{
List l=(List)this.data.getObject(row,column);
double average=0.0;
int count=0;
if(l!=null&&l.size()>0){
for(int i=0;i<l.size();i++){
Number n=(Number)l.get(i);
average+=n.doubleValue();
count+=1;
}
if(count>0){
average=average/count;
}
}
if(count==0){
return null;
}
return new Double(average);
}

1.010721842997034
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/statistics/DefaultMultiValueCategoryDataset.java<203,221>

-------- No Patch ---------


-------- Similar Code ---------
{
List l=(List)this.data.getObject(row,column);
double average=0.0;
int count=0;
if(l!=null&&l.size()>0){
for(int i=0;i<l.size();i++){
Number n=(Number)l.get(i);
average+=n.doubleValue();
count+=1;
}
if(count>0){
average=average/count;
}
}
if(count==0){
return null;
}
return new Double(average);
}

1.010721842997034
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/statistics/DefaultMultiValueCategoryDataset.java<231,249>

-------- No Patch ---------


-------- Similar Code ---------
if(this.data==null){
if(that.getKey()!=null||that.getValue()!=null){
return false;
}
return true;
}

0.991849098357292
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/general/DefaultKeyedValueDataset.java<158,163>


-------- Patch ---------
if(end<start){
return true;
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
while(current<=end){
double v=calculateValue(current);
if(range.contains(v)){
ticks.add(new NumberTick(TickType.MAJOR,v,createTickLabel(v),textAnchor,TextAnchor.CENTER,0.0));
}
double next=Math.pow(this.base,current+this.tickUnit.getSize());
for(int i=1;i<minorTickCount;i++){
double minorV=v+i*((next-v)/minorTickCount);
if(range.contains(minorV)){
ticks.add(new NumberTick(TickType.MINOR,minorV,"",textAnchor,TextAnchor.CENTER,0.0));
}
}
current=current+this.tickUnit.getSize();
}

0.9848095234710081
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/axis/LogAxis.java<524,541>

-------- No Patch ---------


-------- Similar Code ---------
while(current<=end){
double v=calculateValue(current);
if(range.contains(v)){
ticks.add(new NumberTick(TickType.MAJOR,v,createTickLabel(v),textAnchor,TextAnchor.CENTER,0.0));
}
double next=Math.pow(this.base,current+this.tickUnit.getSize());
for(int i=1;i<minorTickCount;i++){
double minorV=v+i*((next-v)/minorTickCount);
if(range.contains(minorV)){
ticks.add(new NumberTick(TickType.MINOR,minorV,"",textAnchor,TextAnchor.CENTER,0.0));
}
}
current=current+this.tickUnit.getSize();
}

0.9848095234710081
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/axis/LogAxis.java<576,593>

-------- No Patch ---------


-------- Similar Code ---------
if(include==SerialDate.INCLUDE_BOTH){
return (s>=start&&s<=end);
}else if(include==SerialDate.INCLUDE_FIRST){
return (s>=start&&s<end);
}else if(include==SerialDate.INCLUDE_SECOND){
return (s>start&&s<=end);
}else {
return (s>start&&s<end);
}

0.9792356111603805
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/SpreadsheetDate.java<423,434>

-------- No Patch ---------


-------- Similar Code ---------
double start=this.timeline.toTimelineValue((long)getRange().getLowerBound());
double length=(this.timeline.toTimelineValue((long)getRange().getUpperBound())-this.timeline.toTimelineValue((long)getRange().getLowerBound()));
Range adjusted=null;
if(isInverted()){
adjusted=new DateRange(this.timeline.toMillisecond((long)(start+(length*(1-upperPercent)))),this.timeline.toMillisecond((long)(start+(length*(1-lowerPercent)))));
}else {
adjusted=new DateRange(this.timeline.toMillisecond((long)(start+length*lowerPercent)),this.timeline.toMillisecond((long)(start+length*upperPercent)));
}
setRange(adjusted);

0.9687766049952151
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/axis/DateAxis.java<1863,1883>

-------- No Patch ---------


-------- Similar Code ---------
if(this.pointsInTime[0]==null){
this.pointsInTime[0]=start;
for(int i=1;i<this.historyCount;i++){
this.pointsInTime[i]=this.pointsInTime[i-1].next();
}
}

0.9564427777629047
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/DynamicTimeSeriesCollection.java<315,320>

-------- No Patch ---------


-------- Similar Code ---------
for(int i=0;i<clone.datasets.size();++i){
XYDataset d=getDataset(i);
if(d!=null){
d.addChangeListener(clone);
}
}
clone.datasetToDomainAxesMap=new TreeMap();
clone.datasetToDomainAxesMap.putAll(this.datasetToDomainAxesMap);
clone.datasetToRangeAxesMap=new TreeMap();
clone.datasetToRangeAxesMap.putAll(this.datasetToRangeAxesMap);

0.9515216535200841
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/plot/XYPlot.java<5675,5685>


-------- Patch ---------
if(d<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
clone.datasetToDomainAxesMap=new TreeMap();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
clone.datasetToDomainAxesMap.putAll(this.datasetToDomainAxesMap);
copy.data=new java.util.ArrayList();


-------- Patch ---------
clone.datasetToRangeAxesMap.putAll(this.datasetToRangeAxesMap);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
for(int i=0;i<clone.datasets.size();i++){
CategoryDataset dataset=clone.getDataset(i);
if(dataset!=null){
dataset.addChangeListener(clone);
}
}
clone.datasetToDomainAxesMap=new TreeMap();
clone.datasetToDomainAxesMap.putAll(this.datasetToDomainAxesMap);
clone.datasetToRangeAxesMap=new TreeMap();
clone.datasetToRangeAxesMap.putAll(this.datasetToRangeAxesMap);

0.9477060397352641
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/plot/CategoryPlot.java<5122,5131>


-------- Repeated Patch ---------
if(dataset<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
clone.datasetToDomainAxesMap=new TreeMap();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
clone.datasetToDomainAxesMap.putAll(this.datasetToDomainAxesMap);
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
clone.datasetToRangeAxesMap.putAll(this.datasetToRangeAxesMap);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(dataset<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
clone.datasetToDomainAxesMap=new TreeMap();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(dataset<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
clone.datasetToDomainAxesMap.putAll(this.datasetToDomainAxesMap);
copy.data=new java.util.ArrayList();


-------- Patch ---------
clone.datasetToRangeAxesMap.putAll(this.datasetToRangeAxesMap);
if(dataset<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
clone.datasetToDomainAxesMap=new TreeMap();
clone.datasetToDomainAxesMap.putAll(this.datasetToDomainAxesMap);
copy.data=new java.util.ArrayList();


-------- Patch ---------
clone.datasetToRangeAxesMap.putAll(this.datasetToRangeAxesMap);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
clone.datasetToDomainAxesMap=new TreeMap();
copy.data=new java.util.ArrayList();


-------- Patch ---------
clone.datasetToRangeAxesMap.putAll(this.datasetToRangeAxesMap);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
clone.datasetToDomainAxesMap.putAll(this.datasetToDomainAxesMap);
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(dataset<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
clone.datasetToDomainAxesMap=new TreeMap();
clone.datasetToDomainAxesMap.putAll(this.datasetToDomainAxesMap);
copy.data=new java.util.ArrayList();


-------- Patch ---------
clone.datasetToRangeAxesMap.putAll(this.datasetToRangeAxesMap);
if(dataset<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
clone.datasetToDomainAxesMap=new TreeMap();
copy.data=new java.util.ArrayList();


-------- Patch ---------
clone.datasetToRangeAxesMap.putAll(this.datasetToRangeAxesMap);
if(dataset<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
clone.datasetToDomainAxesMap.putAll(this.datasetToDomainAxesMap);
copy.data=new java.util.ArrayList();


-------- Patch ---------
clone.datasetToRangeAxesMap.putAll(this.datasetToRangeAxesMap);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
clone.datasetToDomainAxesMap=new TreeMap();
clone.datasetToDomainAxesMap.putAll(this.datasetToDomainAxesMap);
copy.data=new java.util.ArrayList();


-------- Patch ---------
clone.datasetToRangeAxesMap.putAll(this.datasetToRangeAxesMap);
if(dataset<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
clone.datasetToDomainAxesMap=new TreeMap();
clone.datasetToDomainAxesMap.putAll(this.datasetToDomainAxesMap);
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(entities!=null){
entities.add(new JFreeChartEntity((Rectangle2D)chartArea.clone(),this));
}

0.9434563530497264
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/JFreeChart.java<1159,1162>


-------- Patch ---------
if(entities<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(data!=null){
float lowest=Float.POSITIVE_INFINITY;
float highest=Float.NEGATIVE_INFINITY;
for(int i=0;i<data[0].length;i++){
float v=data[0][i];
if(v<lowest){
lowest=v;
}
if(v>highest){
highest=v;
}
}
if(lowest<=highest){
result=new Range(lowest,highest);
}
}

0.9411033211371953
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/plot/FastScatterPlot.java<720,735>


-------- Repeated Patch ---------
if(data<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
if(data!=null){
float lowest=Float.POSITIVE_INFINITY;
float highest=Float.NEGATIVE_INFINITY;
for(int i=0;i<data[0].length;i++){
float v=data[1][i];
if(v<lowest){
lowest=v;
}
if(v>highest){
highest=v;
}
}
if(lowest<=highest){
result=new Range(lowest,highest);
}
}

0.9411033211371953
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/plot/FastScatterPlot.java<752,767>


-------- Repeated Patch ---------
if(data<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
int validItems=0;
double[][] data=new double[2][itemCount];
for(int item=0;item<itemCount;item++){
double x=dataset.getXValue(series,item);
double y=dataset.getYValue(series,item);
if(!Double.isNaN(x)&&!Double.isNaN(y)){
data[0][validItems]=x;
data[1][validItems]=y;
validItems++;
}
}

0.9367924838115068
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/statistics/Regression.java<256,266>

-------- No Patch ---------


-------- Similar Code ---------
{
Map clone=new HashMap();
Set keys=map.keySet();
Iterator iterator=keys.iterator();
while(iterator.hasNext()){
Object key=iterator.next();
List entry=(List)map.get(key);
Object toAdd=ObjectUtilities.deepClone(entry);
clone.put(key,toAdd);
}
return clone;
}

0.9324664895368299
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/plot/CategoryPlot.java<5181,5192>

-------- No Patch ---------


-------- Similar Code ---------
double start=this.range.getLowerBound();
double length=this.range.getLength();
Range adjusted=null;
if(isInverted()){
adjusted=new Range(start+(length*(1-upperPercent)),start+(length*(1-lowerPercent)));
}else {
adjusted=new Range(start+length*lowerPercent,start+length*upperPercent);
}
setRange(adjusted);

0.9299913734119927
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/axis/ValueAxis.java<1591,1602>

-------- No Patch ---------


-------- Similar Code ---------
if(this.data!=null){
for(int i=0;i<this.data[0].length;i++){
float x=this.data[0][i];
float y=this.data[1][i];
int transX=(int)this.domainAxis.valueToJava2D(x,dataArea,RectangleEdge.BOTTOM);
int transY=(int)this.rangeAxis.valueToJava2D(y,dataArea,RectangleEdge.LEFT);
g2.fillRect(transX,transY,1,1);
}
}

0.9275988074239369
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/plot/FastScatterPlot.java<616,629>

-------- No Patch ---------


-------- Similar Code ---------
double start=getCategoryStart(categoryIndex,categoryCount,area,edge);
double end=getCategoryEnd(categoryIndex,categoryCount,area,edge);
double width=end-start;
if(seriesCount==1){
return start+width/2.0;
}else {
double gap=(width*itemMargin)/(seriesCount-1);
double ww=(width*(1-itemMargin))/seriesCount;
return start+(seriesIndex*(ww+gap));
}

0.9233884213754201
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/axis/CategoryAxis.java<751,762>

-------- No Patch ---------


-------- Similar Code ---------
result=(this.domain!=null?this.domain.hashCode():0);
result=29*result+(this.range!=null?this.range.hashCode():0);
result=29*result+this.data.hashCode();
result=29*result+this.minStartIndex;
result=29*result+this.maxStartIndex;

0.9223728466044522
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/TimePeriodValues.java<452,456>

-------- No Patch ---------


-------- Similar Code ---------
double end=getCategoryEnd(categoryIndex,categoryCount,area,edge);
double width=end-start;
if(seriesCount==1){
return start+width/2.0;
}else {
double gap=(width*itemMargin)/(seriesCount-1);
double ww=(width*(1-itemMargin))/seriesCount;
return start+(seriesIndex*(ww+gap));
}

0.9129230409138394
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/axis/CategoryAxis.java<719,728>

-------- No Patch ---------


-------- Similar Code ---------
int result;
result=(this.data!=null?this.data.hashCode():0);
result=29*result+(this.xPoints!=null?this.xPoints.hashCode():0);
result=29*result+(this.propagateEvents?1:0);
result=29*result+(this.autoPrune?1:0);
return result;

0.9071899761331756
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/xy/DefaultTableXYDataset.java<527,533>

-------- No Patch ---------


-------- Similar Code ---------
if(plot.getOrientation()==PlotOrientation.HORIZONTAL){
completeBar=new Rectangle2D.Double(java2dValue0,rectStart+start*rectBreadth,rectLength*p,rectBreadth*(end-start));
incompleteBar=new Rectangle2D.Double(java2dValue0+rectLength*p,rectStart+start*rectBreadth,rectLength*(1-p),rectBreadth*(end-start));
}else if(plot.getOrientation()==PlotOrientation.VERTICAL){
completeBar=new Rectangle2D.Double(rectStart+start*rectBreadth,java2dValue1+rectLength*(1-p),rectBreadth*(end-start),rectLength*p);
incompleteBar=new Rectangle2D.Double(rectStart+start*rectBreadth,java2dValue1,rectBreadth*(end-start),rectLength*(1-p));
}

0.8521014954971338
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/renderer/category/GanttRenderer.java<481,496>

-------- No Patch ---------


-------- Similar Code ---------
if(orientation==PlotOrientation.HORIZONTAL){
completeBar=new Rectangle2D.Double(translatedValue0,rectStart+start*rectBreadth,rectLength*p,rectBreadth*(end-start));
incompleteBar=new Rectangle2D.Double(translatedValue0+rectLength*p,rectStart+start*rectBreadth,rectLength*(1-p),rectBreadth*(end-start));
}else if(orientation==PlotOrientation.VERTICAL){
completeBar=new Rectangle2D.Double(rectStart+start*rectBreadth,translatedValue0+rectLength*(1-p),rectBreadth*(end-start),rectLength*p);
incompleteBar=new Rectangle2D.Double(rectStart+start*rectBreadth,translatedValue0,rectBreadth*(end-start),rectLength*(1-p));
}

0.8369398720276177
/home/dale/d4j/Chart/Chart_3/source/org/jfree/chart/renderer/category/GanttRenderer.java<341,357>


-------- Repeated Patch ---------
if(orientation<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Repeated Patch ---------
if(end<HORIZONTAL){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();


-------- Patch ---------
if(orientation<HORIZONTAL){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

-------- Similar Code ---------
Object clone=createCopy(0,getItemCount()-1);
return clone;

0.8131249357707345
/home/dale/d4j/Chart/Chart_3/source/org/jfree/data/time/TimePeriodValues.java<480,481>

-------- No Patch ---------

